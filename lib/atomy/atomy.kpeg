%% name = Atomy::Parser

             sp = (" " | "\t" | comment)*
            wsp = (" " | "\t" | "\n" | comment)*
         sig_sp = (" " | "\t" | comment)+
        sig_wsp = (" " | "\t" | "\n" | comment)+

        shebang = "#!" /.*?$/

        cont(p) = ("\n" sp)+ &{ continue?(p) }
                | sig_sp cont(p)?
                | !"(" # ensures (x)(y) is a Call, not a Compose

           line = { current_line }

      # \p{S} matches ["$", "+", "<", "=", ">", "^", "`", "|", "~"]
      op_letter = !"`" < /[\p{S}!@#%&*\-\\.\/\?]/u > { text.to_sym }

       operator = < !"~" ":"? op_letter+ > { text.to_sym }

     identifier = < /[\p{Ll}_][\p{L}\d\-_]*/u > { text.tr("-", "_").to_sym }

        grouped = "(" wsp expression:x wsp ")" { x }

        comment = /--.*?$/ | multi_comment

  multi_comment = "{-" in_multi
       in_multi = /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ "{-" in_multi /[^\-\{\}]*/ "-}"
                | /[^\-\{\}]*/ /[-{}]/ in_multi

       delim(c) = (wsp "," wsp) | (sp "\n" sp)+ &{ current_column >= c }

     expression = level4
 one_expression = wsp expression:e wsp !. { e }

    expressions = { current_column }:c expression:x (delim(c) expression)*:xs
                    { [x] + Array(xs) }

  level0(no_op) = number
                | quote
                | quasi_quote
                | unquote
                | string
                | constant
                | word(no_op)
                | block
                | list
                | prefix
         level1 = call
                | grouped
                | level0(true)
         level2 = postfix
                | level1
         level3 = compose
                | level2
         level4 = language
                | infix
                | level3

         number = line:line < /[\+\-]?0[oO][0-7]+/ >
                    { create(Primitive, line, :value => text.to_i(8)) }
                | line:line < /[\+\-]?0[xX][\da-fA-F]+/ >
                    { create(Primitive, line, :value => text.to_i(16)) }
                | line:line < /[\+\-]?\d+(\.\d+)?[eE][\+\-]?\d+/ >
                    { create(Literal, line, :value => text.to_f) }
                | line:line < /[\+\-]?\d+\.\d+/ >
                    { create(Literal, line, :value => text.to_f) }
                | line:line < /[\+\-]?\d+/ >
                    { create(Primitive, line, :value => text.to_i) }

       language = "#language" wsp identifier:n { set_lang(n) } %lang.root

          quote = line:line "'" level2:e
                    { create(Quote, line, :expression => e) }
    quasi_quote = line:line "`" level2:e
                    { create(QuasiQuote, line, :expression => e) }
        unquote = line:line "~" level2:e
                    # TODO: node, not expression
                    { create(Unquote, line, :expression => e) }

         escape = number_escapes | escapes
        str_seq = < /[^\\"]+/ > { text }
         string = line:line "\"" < (("\\" escape) | str_seq)*:c > "\""
                    { create(StringLiteral, line,
                        :value => c.join,
                        :raw => text.gsub("\\\"", "\""))
                    }

  constant_name = < /[A-Z][a-zA-Z0-9_]*/ > { text.to_sym }
       constant = line:line constant_name:n
                    { create(Constant, line, :name => n) }

    word(no_op) = line:line identifier:n !{ no_op && operator?(n) }
                    { create(Word, line, :text => n) }

         prefix = line:line op_letter:o level2:e
                    { create(Prefix, line, :receiver => e, :operator => o) }

        postfix = line:line postfix:e op_letter:o
                    { create(Postfix, line, :receiver => e, :operator => o) }
                | line:line level1:e op_letter:o
                    { create(Postfix, line, :receiver => e, :operator => o) }

          block = line:line ":" !op_letter wsp expressions?:es (wsp ";")?
                    { create(Block, line, :contents => Array(es)) }
                | line:line "{" wsp expressions?:es wsp "}"
                    { create(Block, line, :contents => Array(es)) }

           list = line:line "[" wsp expressions?:es wsp "]"
                    # TODO: contents vs. elements vs. nodes? (see block)
                    { create(List, line, :elements => Array(es)) }

  composes(pos) = line:line compose:l cont(pos) level2:r
                    { create(Compose, line, :left => l, :right => r) }
                | line:line level2:l cont(pos) level2:r
                    { create(Compose, line, :left => l, :right => r) }
        compose = @composes(current_position)

           name = line:line name:n op_letter:o
                    { create(Postfix, line, :receiver => n, :operator => o) }
                | grouped
                | level0(false)
           args = "(" wsp expressions?:as wsp ")" { Array(as) }

           # TODO: don't like :name
           call = line:line call:c args:as
                    { create(Call, line, :name => c, :arguments => as) }
                | line:line name:n args:as
                    { create(Call, line, :name => n, :arguments => as) }

       infix_op = operator
                | identifier:n &{ operator?(n) } { n }

   infix_c(pos) = cont(pos) (infix_op:o sig_wsp { o })+:os level3:e
                    { o = os.shift
                      [ Operator.new(@module, o),
                        os.collect do |h|
                          [private_target, Operator.new(@module, h, true)]
                        end,
                        e
                      ]
                    }
  infix_cs(pos) = infix_c(pos)+:bs { bs.flatten }

         infix = { current_position }:pos level3:l infix_cs(pos):c
                    { resolve(nil, l, c).first }
                | infix_cs(current_position):c
                    { c[0].private = true
                      resolve(nil, private_target, c).first
                    }


        escapes = "n" { "\n" }     | "s" { " " }      | "r" { "\r" }
                | "t" { "\t" }     | "v" { "\v" }     | "f" { "\f" }
                | "b" { "\b" }     | "a" { "\a" }     | "e" { "\e" }
                | "\\" { "\\" }    | "\"" { "\"" }    | "BS" { "\b" }
                | "HT" { "\t" }    | "LF" { "\n" }    | "VT" { "\v" }
                | "FF" { "\f" }    | "CR" { "\r" }    | "SO" { "\016" }
                | "SI" { "\017" }  | "EM" { "\031" }  | "FS" { "\034" }
                | "GS" { "\035" }  | "RS" { "\036" }  | "US" { "\037" }
                | "SP" { " " }     | "NUL" { "\000" } | "SOH" { "\001" }
                | "STX" { "\002" } | "ETX" { "\003" } | "EOT" { "\004" }
                | "ENQ" { "\005" } | "ACK" { "\006" } | "BEL" { "\a" }
                | "DLE" { "\020" } | "DC1" { "\021" } | "DC2" { "\022" }
                | "DC3" { "\023" } | "DC4" { "\024" } | "NAK" { "\025" }
                | "SYN" { "\026" } | "ETB" { "\027" } | "CAN" { "\030" }
                | "SUB" { "\032" } | "ESC" { "\e" }   | "DEL" { "\177" }
                | < . > { "\\" + text }

 number_escapes = /[xX]/ < /[0-9a-fA-F]{1,5}/ > { [text.to_i(16)].pack("U") }
                | < /\d{1,6}/ > { [text.to_i].pack("U") }
                | /[oO]/ < /[0-7]{1,7}/ > { [text.to_i(16)].pack("U") }
                | /[uU]/ < /[0-9a-fA-F]{4}/ > { [text.to_i(16)].pack("U") }


            top = expression:e { callback(e) }

           tree = { current_column }:c top:x (delim(c) top)*:xs
                    { [x] + Array(xs) }

           root = shebang? wsp tree:es wsp !. { Array(es) }
