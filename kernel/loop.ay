use("core")
use("define")
use("dynamic")
use("control-flow")
use("meta")
use("node")
use("init")

Tags = dynamic(Hash new)

Atomy AST open:
  ast:
    Labels([.branches])
    LabelBranch(.body, @name)
    GoTo(@name)

  Labels bytecode(g, mod) := do:
    pos(g)

    tags = Hash new

    lbls =
      @branches to-a collect [t]:
        tags [t name] = g new-label

    with(Tags = tags):
      lbls zip(@branches to-a) each [l, t]:
        l set!
        mod compile(g, t body)
        g pop

    g push-nil

  GoTo bytecode(g, _) := do:
    pos(g)
    g goto(^Tags fetch(@name))


macro(labels ~(body: Block)):
  branches = body contents collect [`(~n ~b)]:
    init(LabelBranch, line -> n line, name -> n text, body -> b body)

  `(let-macro(go(~'~name) = init(GoTo, name -> name text)):
      ~init(Labels, line -> node line, branches -> branches))

macro(~x while ~y): `(while(~y): ~x)
macro(while(~test) ~(body: Block)):
  names [loop, done]:
    `(labels:
        ~loop:
          unless(~test):
            go(~done)

          let-macro(break = 'go(~done),
                    next = 'go(~loop)):
            ~(body body)

          go(~loop)

        ~done {})

macro(~x until ~y): `(until(~y): ~x)
macro(until(~test) ~(body: Block)):
  names [loop, done]:
    `(labels:
        ~loop:
          when(~test):
            go(~done)

          let-macro(break = 'go(~done),
                    next = 'go(~loop)):
            ~(body body)

          go(~loop)

        ~done {})

macro(loop: ~*body):
  names [loop, done]:
    `(labels:
        ~loop:
          let-macro(break = 'go(~done),
                    next = 'go(~loop)):
            ~*body

          go(~loop)

        ~done {})
