-- a macro for defining macros!
evaluate(macro-definer(
  '`(macro(~pat): ~*body)
  'macro-definer(make-quasiquote(pat), make-sequence(body))))

-- pattern definition
macro(pattern(~pat): ~*body):
  pattern-definer(make-quasiquote(pat), make-sequence(body))

-- sequences
macro(do: ~*nodes):
  make-sequence(nodes)

-- constant scoping
macro(~parent ~(name & Constant)):
  make-constant(name text, parent)

-- booleans
macro(false): Atomy Code False new
macro(true): Atomy Code True new

-- nils
macro(nil): Atomy Code Nil new

-- undefined
macro(_): Atomy Code Undefined new

-- symbols
macro(.~(sym & Word)): Atomy Code Symbol new(sym text)
macro(.(~(sym & Word))!): Atomy Code Symbol new((sym text to-s + "!") to-sym)
macro(.(~(sym & Word))?): Atomy Code Symbol new((sym text to-s + "?") to-sym)
macro(.~(sym & Constant)): Atomy Code Symbol new(sym text)
macro(.~(str & StringLiteral)): Atomy Code Symbol new(str value to-sym)
macro(.[]): Atomy Code Symbol new("[]" to-sym)
macro(.[]=): Atomy Code Symbol new("[]=" to-sym)

-- assignment
macro(~pat = ~val):
  Atomy Code Assign new(pat, val)

-- block literals
macro({ ~*body }):
  Atomy Code Block new(`(do: ~*body))

macro([~*args]: ~*body):
  Atomy Code Block new(`(do: ~*body), args)

macro(&~blk { ~*body }):
  Atomy Code Block new(`(do: ~*body), [], blk)

macro([~*args] &~blk { ~*body }):
  Atomy Code Block new(`(do: ~*body), args, blk)

-- toplevel constant access
macro(//~(name & Constant)):
  Atomy Code Constant new(name text, 'Object)

-- accessing instance variables
macro(@~(name & Word)):
  Atomy Code InstanceVariable new(name text)

macro(@(~(name & Word))!):
  Atomy Code InstanceVariable new((name text to-s + "!") to-sym)

macro(@(~(name & Word))?):
  Atomy Code InstanceVariable new((name text to-s + "?") to-sym)

-- accessing class variables
macro(@@~(name & Word)):
  Atomy Code ClassVariable new(name text)

macro(@@(~(name & Word))!):
  Atomy Code ClassVariable new((name text to-s + "!") to-sym)

macro(@@(~(name & Word))?):
  Atomy Code ClassVariable new((name text to-s + "?") to-sym)

-- accessing global variables
macro($~(name & Word)):
  `(//Rubinius Globals[~(Atomy Code Symbol new(("$" + name text to-s) to-sym))])

macro($~(name & Constant)):
  `(//Rubinius Globals[~(Atomy Code Symbol new(("$" + name text to-s) to-sym))])

macro($~(name & StringLiteral)):
  `(//Rubinius Globals[~(Atomy Code Symbol new(("$" + name value to-s) to-sym))])

-- foo! access/sending
macro((~(msg & Word))!):
  Atomy Code Variable new((msg text to-s + "!") to-sym)

-- foo? access/sending
macro((~(msg & Word))?):
  Atomy Code Variable new((msg text to-s + "?") to-sym)

-- pattern for assigning foo!
pattern((~(name & Word))!):
  Atomy Code Pattern Wildcard new((name text to-s + "!") to-sym)

-- pattern for assigning foo?
pattern((~(name & Word))?):
  Atomy Code Pattern Wildcard new((name text to-s + "?") to-sym)

-- pattern for re-assigning existing local
pattern(&(~(name & Word))):
  Atomy Code Pattern Wildcard new(name text, true)

-- pattern for re-assigning existing local ending in !
pattern(&(~(name & Word))!):
  Atomy Code Pattern Wildcard new((name text to-s + "!") to-sym, true)

-- pattern for re-assigning existing local ending in ?
pattern(&(~(name & Word))?):
  Atomy Code Pattern Wildcard new((name text to-s + "?") to-sym, true)
