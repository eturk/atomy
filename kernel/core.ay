infix("=", 10, "right")
infix("?", 30, "right")

-- a few macros so we can actually, you know, send messages
define-macro('(~_ ~(? to-word)), 'make-send(node))
define-macro('(~_ (~(? to-word))(~*_)), 'make-send(node))

-- a macro for defining macros!
define-macro(
  '(macro(~pat) ~(body: Block))
  '(DefineMacro bootstrap(node line, pat, body body)))

-- pseudo-variables
macro(nil): Primitive bootstrap(node line, "nil" to-sym)
macro(self): Primitive bootstrap(node line, "self" to-sym)
macro(true): Primitive bootstrap(node line, "true" to-sym)
macro(false): Primitive bootstrap(node line, "false" to-sym)
macro(_): Primitive bootstrap(node line, "undefined" to-sym)

-- assignment/pattern-matching
macro(~x = ~y): Assign bootstrap(node line, x, y)

macro(//~(c: Constant)):
  ToplevelConstant bootstrap(node line, c name)

macro(/~(c: Constant)):
  ScopedConstant bootstrap(node line, 'Self, c name)

macro(/~(w ? to-word)):
  x = w to-send
  x receiver = 'Self
  x

macro(/~send):
  x = expand(send) to-send
  x receiver = 'Self
  x

macro(~x ~(c: Constant)):
  ScopedConstant bootstrap(node line, x, c name)

-- [x, y] { x + y }
macro([~*args]: ~*body):
  Block bootstrap(node line, body, args)

-- [x, y] &z { x + y }
macro([~*args] &~blk { ~*body }):
  Block bootstrap(node line, body, args, blk)

-- &z { x + y }
macro(&~blk { ~*body }):
  Block bootstrap(node line, body, [], blk)

-- foo { bar }
macro(~(w ? to-word) ~(b: Block)):
  x = w to-send
  x block = b
  x

-- foo(a) { bar }
macro((~(? to-word))(~*_) ~(b: Block)):
  x = node left to-send
  x block = b
  x

-- x foo { bar }
macro(~_ ~(? to-word) ~(b: Block)):
  x = node left to-send
  x block = b
  x

-- x foo(a) { bar }
macro(~_ (~(? to-word))(~*_) ~(b: Block)):
  x = node left to-send
  x block = b
  x

-- collect [x] { x + 1 }
macro(~(meth ? to-word) [~*args]: ~*body):
  x = meth to-send
  x block = Block bootstrap(node line, body, args)
  x

-- collect(a) [x] { x + 1 }
macro((~(? to-word))(~*_) [~*args]: ~*body):
  x = node left left to-send
  x block = Block bootstrap(node line, body, args)
  x

-- [1, 2, 3] collect [x] { x + 1 }
macro(~_ ~(? to-word) [~*args]: ~*body):
  x = node left left to-send
  x block = Block bootstrap(node line, body, args)
  x

-- [1, 2, 3] collect(a) [x] { x + 1 }
macro(~_ (~(? to-word))(~*_) [~*args]: ~*body):
  x = node left left to-send
  x block = Block bootstrap(node line, body, args)
  x

-- particle/symbol block-passing shorthand
macro(~x .~y): `(~x &.~y)

-- block-passing
macro(~_ ~(? to-word) &~_):
  node left to-send tap [s]:
    s block = node right

macro((~(? to-word))(~*_) &~_):
  node left to-send tap [x]:
    x block = node right

macro(~_ (~(? to-word))(~*_) &~_):
  node left to-send tap [s]:
    s block = node right

-- foo [bar, ...]
macro(~x [~*ys]): node to-send

-- foo [bar, ...] &baz
macro(~x [~*ys] &~x):
  node left to-send tap [s]:
    s block = node right

-- [bar, ...] &baz
macro([~*_] &~_):
  `(self ~(node left)) to-send tap [s]:
    s private = true
    s block = node right

-- Foo &bar
macro(~(c: Constant) &~_):
  `((~c)()) to-send tap [x]:
    x message-name = c name
    x block = node right

-- Foo(...)
macro((~(c: Constant))(~*args)):
  node to-send tap [x]:
    x message-name = c name

-- Foo(...) &baz
macro((~(c: Constant))(~*args) &~_):
  node left to-send tap [x]:
    x message-name = c name
    x block = node right

-- x Foo(...)
macro(~r (~(c: Constant))(~*args)):
  node right to-send tap [x]:
    x message-name = c name
    x receiver = r
    x private = false

-- x Foo &baz
macro(~r ~(c: Constant) &~_):
  `((~c)()) to-send tap [x]:
    x message-name = c name
    x receiver = r
    x block = node right
    x private = false

-- x Foo(...) &baz
macro(~r (~(c: Constant))(~*args) &~_):
  `((~c)(~*args)) to-send tap [x]:
    x message-name = c name
    x receiver = r
    x block = node right
    x private = false

macro(_LINE): node line
macro(_FILE): ActivePath bootstrap(node line)

macro(&~x):
  BlockPass bootstrap(node line, x)

macro(*~x):
  Splat bootstrap(node line, x)

macro(@~(x: ? to-word)):
  InstanceVariable bootstrap(node line, x to-word text)

macro(@@~(x: ? to-word)):
  ClassVariable bootstrap(node line, x to-word text)

macro($0):
  GlobalVariable bootstrap(node line, "0" to-sym)

macro($~(x: StringLiteral)):
  GlobalVariable bootstrap(node line, x value)

macro($~(x: Constant)):
  GlobalVariable bootstrap(node line, x name)

macro($~(x: ? to-word)):
  GlobalVariable bootstrap(node line, x to-word text)

macro($exception):
  GlobalVariable bootstrap(node line, "!" to-sym)

macro($path):
  GlobalVariable bootstrap(node line, ":" to-sym)

macro($separator):
  GlobalVariable bootstrap(node line, "/" to-sym)

macro(.~(x: Constant)):
  Literal bootstrap(node line, x name)

macro(.~(x: ? to-word)):
  Literal bootstrap(node line, x to-word text)

macro(.~(x: StringLiteral)):
  Literal bootstrap(node line, x value to-sym)

macro(.[]): ."[]"
macro(.[]=): ."[]="

-- bar?
macro((~Word)?): node to-word

-- x bar?
macro(~x (~Word)?):
  node dup tap [c]:
    c right = node right to-word


-- bar(...)?
macro((~Word)(~*args)?):
  node receiver copy tap [r]:
    r name text = (r name text to-s + "?") to-sym

-- foo bar(...)?
macro(~x (~Word)(~*args)?):
  node copy tap [c]:
    c right =
      c right receiver tap [r]:
        r name text = (r name text to-s + "?") to-sym

-- bar!
macro((~Word)!): node to-word

-- x bar!
macro(~x (~Word)!):
  node dup tap [c]:
    c right = c right to-word


-- bar(...)!
macro((~Word)(~*args)!):
  node receiver copy tap [r]:
    r name text = (r name text to-s + "!") to-sym

-- foo bar(...)!
macro(~x (~Word)(~*args)!):
  node copy tap [c]:
    c right =
      c right receiver tap [r]:
        r name text = (r name text to-s + "!") to-sym


use("operators")
