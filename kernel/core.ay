-- a macro for defining macros!
evaluate(macro-definer(
  '`(macro(~pat): ~*body)
  'macro-definer(make-quasiquote(pat), make-sequence(body))))

-- pattern definition
macro(pattern(~pat): ~*body):
  pattern-definer(make-quasiquote(pat), make-sequence(body))

-- sequences
macro(do: ~*nodes):
  make-sequence(nodes)

-- a few macros so we can actually, you know, send messages
macro(~recv ~(msg & Word)):
  make-send(recv, msg)

macro(~recv (~(msg & Word))(~*args)):
  make-send(recv, msg, args)

-- constant scoping
macro(~parent ~(name & Constant)):
  make-constant(name text, parent)

-- booleans
macro(false): Atomy Code False new
macro(true): Atomy Code True new

-- nils
macro(nil): Atomy Code Nil new

-- symbols
macro(.~(sym & Word)): Atomy Code Symbol new(sym text)
macro(.~(sym & Constant)): Atomy Code Symbol new(sym text)

-- assignment
macro(~pat = ~val):
  Atomy Code Assign new(pat, val, false)

-- assignment, overriding locals
macro(~pat =! ~val):
  Atomy Code Assign new(pat, val, true)

-- block literals
macro({ ~*body }):
  Atomy Code Block new(`(do: ~*body))

macro([~*args]: ~*body):
  Atomy Code Block new(`(do: ~*body), args)

-- message sends to self with blocks
macro(~(msg & Word): ~*body):
  Atomy Code Send new(nil, msg text, [], `{ ~*body })

macro(~(msg & Word) [~*bargs]: ~*body):
  Atomy Code Send new(nil, msg text, [], `([~*bargs]: ~*body))

macro((~(msg & Word))(~*args): ~*body):
  Atomy Code Send new(nil, msg text, args, `{ ~*body })

macro((~(msg & Word))(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(nil, msg text, args, `([~*bargs]: ~*body))

-- message sends to receivers with blocks
macro(~recv ~(msg & Word): ~*body):
  Atomy Code Send new(recv, msg text, [], `{ ~*body })

macro(~recv ~(msg & Word) [~*bargs]: ~*body):
  Atomy Code Send new(recv, msg text, [], `([~*bargs]: ~*body))

macro(~recv (~(msg & Word))(~*args): ~*body):
  Atomy Code Send new(recv, msg text, args, `{ ~*body })

macro(~recv (~(msg & Word))(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(recv, msg text, args, `([~*bargs]: ~*body))

macro(//~(name & Constant)):
  Atomy Code Constant new(name text, 'Object)

-- sending #[] message
macro(~recv [~*args]):
  Atomy Code Send new(recv, "[]" to-sym, args)

-- accessing instance variables
macro(@~(name & Word)):
  Atomy Code InstanceVariable new(name text)

-- sending foo! to self
macro((~(msg & Word))!):
  Atomy Code Variable new((msg text to-s + "!") to-sym)

-- sending foo? to self
macro((~(msg & Word))?):
  Atomy Code Variable new((msg text to-s + "?") to-sym)

-- sending foo! to self with arguments
macro((~(msg & Word))!(~*args)):
  Atomy Code Send new(nil, (msg text to-s + "!") to-sym, args)

-- sending foo? to self with arguments
macro((~(msg & Word))?(~*args)):
  Atomy Code Send new(nil, (msg text to-s + "?") to-sym, args)

-- sending foo! to self with a block that has no arguments
macro((~(msg & Word))!: ~*body):
  Atomy Code Send new(nil, (msg text to-s + "!") to-sym, [], `{ ~*body })

-- sending foo? to self with a block that has no arguments
macro((~(msg & Word))?: ~*body):
  Atomy Code Send new(nil, (msg text to-s + "?") to-sym, [], `{ ~*body })

-- sending foo! to self with a block that has arguments
macro((~(msg & Word))! [~*bargs]: ~*body):
  Atomy Code Send new(nil, (msg text to-s + "!") to-sym, [], `([~*bargs]: ~*body))

-- sending foo? to self with a block that has arguments
macro((~(msg & Word))? [~*bargs]: ~*body):
  Atomy Code Send new(nil, (msg text to-s + "?") to-sym, [], `([~*bargs]: ~*body))

-- sending foo! to self with arguments and a block that has no arguments
macro((~(msg & Word))!(~*args): ~*body):
  Atomy Code Send new(nil, (msg text to-s + "!") to-sym, args, `{ ~*body })

-- sending foo? to self with arguments and a block that has no arguments
macro((~(msg & Word))?(~*args): ~*body):
  Atomy Code Send new(nil, (msg text to-s + "?") to-sym, args, `{ ~*body })

-- sending foo! to self with arguments and a block that has arguments
macro((~(msg & Word))!(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(nil, (msg text to-s + "!") to-sym, args, `([~*bargs]: ~*body))

-- sending foo? to self with arguments and a block that has arguments
macro((~(msg & Word))?(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(nil, (msg text to-s + "?") to-sym, args, `([~*bargs]: ~*body))

-- sending foo! to a receiver
macro(~recv (~(msg & Word))!):
  Atomy Code Send new(recv, (msg text to-s + "!") to-sym)

-- sending foo? to a receiver
macro(~recv (~(msg & Word))?):
  Atomy Code Send new(recv, (msg text to-s + "?") to-sym)

-- sending foo! to a receiver with arguments
macro(~recv (~(msg & Word))!(~*args)):
  Atomy Code Send new(recv, (msg text to-s + "!") to-sym, args)

-- sending foo? to a receiver with arguments
macro(~recv (~(msg & Word))?(~*args)):
  Atomy Code Send new(recv, (msg text to-s + "?") to-sym, args)

-- sending foo! to a receiver with a block that has no arguments
macro(~recv (~(msg & Word))!: ~*body):
  Atomy Code Send new(recv, (msg text to-s + "!") to-sym, [], `{ ~*body })

-- sending foo? to a receiver with a block that has no arguments
macro(~recv (~(msg & Word))?: ~*body):
  Atomy Code Send new(recv, (msg text to-s + "?") to-sym, [], `{ ~*body })

-- sending foo! to a receiver with a block that has arguments
macro(~recv (~(msg & Word))! [~*bargs]: ~*body):
  Atomy Code Send new(recv, (msg text to-s + "!") to-sym, [], `([~*bargs]: ~*body))

-- sending foo? to a receiver with a block that has arguments
macro(~recv (~(msg & Word))? [~*bargs]: ~*body):
  Atomy Code Send new(recv, (msg text to-s + "?") to-sym, [], `([~*bargs]: ~*body))

-- sending foo! to a receiver with arguments and a block that has no arguments
macro(~recv (~(msg & Word))!(~*args): ~*body):
  Atomy Code Send new(recv, (msg text to-s + "!") to-sym, args, `{ ~*body })

-- sending foo? to a receiver with arguments and a block that has no arguments
macro(~recv (~(msg & Word))?(~*args): ~*body):
  Atomy Code Send new(recv, (msg text to-s + "?") to-sym, args, `{ ~*body })

-- sending foo! to a receiver with arguments and a block that has arguments
macro(~recv (~(msg & Word))!(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(recv, (msg text to-s + "!") to-sym, args, `([~*bargs]: ~*body))

-- sending foo? to a receiver with arguments and a block that has arguments
macro(~recv (~(msg & Word))?(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(recv, (msg text to-s + "?") to-sym, args, `([~*bargs]: ~*body))

-- pattern for assigning foo!
pattern((~(name & Word))!):
  var-name = (name text to-s + "!") to-sym

  Atomy Code Pattern new(
    `(//Atomy Pattern Wildcard new(~(Atomy Code Symbol new(var-name))))
    [var-name]
  )

-- pattern for assigning foo?
pattern((~(name & Word))?):
  var-name = (name text to-s + "?") to-sym

  Atomy Code Pattern new(
    `(//Atomy Pattern Wildcard new(~(Atomy Code Symbol new(var-name))))
    [var-name]
  )
