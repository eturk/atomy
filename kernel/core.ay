-- sequences
define-macro('`(do: ~*nodes), 'make-sequence(nodes))

-- a macro for defining macros!
define-macro(
  '`(macro(~pat): ~*body)
  '`(define-macro('~make-quasiquote(pat), '(do: ~*body))))

-- a few macros so we can actually, you know, send messages
macro(~recv ~(msg & Word)):
  make-send(recv, msg)

macro(~recv (~(msg & Word))(~*args)):
  make-send(recv, msg, args)

-- constant scoping
macro(~parent ~(name & Constant)):
  make-constant(name text, parent)

-- booleans
macro(false): Atomy Code False new
macro(true): Atomy Code True new

-- assignment
macro(~pat = ~val):
  Atomy Code Assign new(pat, val, false)

-- assignment, overriding locals
macro(~pat =! ~val):
  Atomy Code Assign new(pat, val, true)

-- block literals
macro({ ~*body }):
  Atomy Code Block new(`(do: ~*body))

macro([~*args]: ~*body):
  Atomy Code Block new(`(do: ~*body), args)

-- message sends with blocks
macro(~recv ~(msg & Word): ~*body):
  Atomy Code Send new(recv, msg text, [], `{ ~*body })

macro(~recv ~(msg & Word) [~*bargs]: ~*body):
  Atomy Code Send new(recv, msg text, [], `([~*bargs]: ~*body))

macro(~recv (~(msg & Word))(~*args): ~*body):
  Atomy Code Send new(recv, msg text, args, `{ ~*body })

macro(~recv (~(msg & Word))(~*args) [~*bargs]: ~*body):
  Atomy Code Send new(recv, msg text, args, `([~*bargs]: ~*body))

macro(//~(name & Constant)):
  Atomy Code Constant new(name text, 'Object)
