use("core")
use("define")
use("node")

macro(when-compiling ~(b: Block)):
  eval(b body)
  'nil

Atomy AST open:
  ast(LetMacro(.body, [.macros]))

  LetMacro bytecode(g, mod) := do:
    new = Atomy Module new(mod file)
    new delegate = mod

    new send(.include, mod)
    new extend(mod)
    new using << mod

    @macros each [`(~pat = ~exp)]:
      new define-macro(pat, exp)

    new compile(g, body)

macro(let-macro(~*ms) ~(b: Block)):
  LetMacro new [l]:
    l body = b body
    l macros = ms
