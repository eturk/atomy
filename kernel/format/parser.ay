use("core")
use("define")
use("block")
use("control-flow")
use("grammar")

Atomy Format open:
  parser(Parser):
    %%:
      create(x, *as) := do:
        as << []
        x send(.new, 1, *as)

    %atomy := Atomy Parser

    text(e) := [
      <(/"[^\\%#{Regexp quote(e)}]+"/)> { text }
      "\\" <(/"[%\(\)\{\}\[\]]"/)> { text }
      "\\" e=(%atomy(escape)) { e }
    ]

    nested(e) := c=(text(e)+) { Chunk new(0, [], c join) }

    chunk := nested("")

    flagged := "%" fs=(flag*) s=(segment) { s flags = fs, s }

    flag := [
      "#" { Number new(0, nil) }
      "0" &("." /"\d"/ | /"\d"/) { ZeroPad new(0) }
      "." <(/"\d+"/)> { Precision new(0, text to-i) }
      <(/"\d+"/)> { Number new(0, text to-i) }
      <(/"[\.\+\*=<>,\?]"/)> { Symbol new(0, text) }
    ]

    segment := [
      "p" "(" s=(sub(")")) ")" ("(" p=(sub(")")) ")")? {
        Pluralize new(0, s, [], p)
      }
      "l" "(" c=(sub(")")) ")" { create(Lowercase, c) }
      "c" "(" c=(sub(")")) ")" { create(Capitalize, c) }
      "u" "(" c=(sub(")")) ")" { create(Uppercase, c) }
      "j" cs=(("(" c=(sub(")")) ")" { c })+) { create(Justify, cs) }
      "{" c=(sub("}")) "}" { create(Iterate, c) }
      bs=(("[" c=(sub("]")) "]" { c })+) ("(" d=(sub(")")) ")")? {
        Conditional new(0, Array(bs), [], d)
      }
      "_" { create(Skip) }
      "^" { create(Break) }
      "%" { create(Indirection) }
      "s" { create(String) }
      "d" { create(Decimal) }
      "x" { create(Hex) }
      "o" { create(Octal) }
      "b" { create(Binary) }
      "r" { create(Radix) }
      "f" { create(Float) }
      "e" { create(Exponent) }
      "g" { create(General) }
      "c" { create(Character) }
      "v" { create(Any) }
    ]

    sub(e) := as=((flagged | nested(e))*) {
      Formatter new(0, Array(as))
    }

    root := sub("")


  Parser singleton:
    parse(source) :=
      new(source) onto:
        unless(parse):
          raise-error

        result
