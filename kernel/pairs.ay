use("core")
use("define")


key-from(x) = x
key-from(x: `(~_: ~*_)) = x
key-from(`(~_ ~x)) = x

base-pair(x, ys) =
  [[key-from(x), `(do: ~*ys)]]

pair-from(x) = raise("unknown pair `" + x inspect + "'")

pair-from(`(~k -> ~v)) =
  [[k, v]]

pair-from(p: `(~(x: `(~_: ~*_)) { ~*ys })) =
  base-pair(x, ys)

pair-from(p: `(~(x: `(~rest ~_)) { ~*ys })) =
  pair-from(rest) + base-pair(x, ys)

pair-from(p: `(~x { ~*ys })) =
  base-pair(x, ys)

from(es) := es collect [e] { pair-from(e) } flatten(1)
