use("core")
use("define")
use("control-flow")
use("dynamic")
use("particles")
use("node")
use("init")
use("memo")

require("kpeg")
require("kpeg/compiled_parser")
require("set")


-- lazily load these modules to prevent circular dependency
memo(pretty): require("pretty")
memo(intp): require("interpolation")


actions = dynamic
setups = dynamic
vars = dynamic
rule = dynamic
rule-vars = dynamic

const-name(c: Atomy AST Compose) = const-name(c left) + "::" + const-name(c right)
const-name(c: Atomy AST Constant) = c name to-s
const-name(c: Atomy AST ScopedConstant) = const-name(c parent) + "::" + c name to-s
const-name(c: Atomy AST ToplevelConstant) = "::" + c name to-s

process-val(g, `(%(~grammar)(~name)(~*args))) = do:
  `(~g foreign-invoke(
      ~(grammar text)
      ~(name text)
      ~(args collect .(pretty show(_)) join(", "))))

process-val(g, `(%(~grammar)(~name))) = do:
  `(~g foreign-invoke(~(grammar text), ~(name text)))

process-val(g, `((~name)=(~v))) = do:
  val = process-val(g, v)

  when(^rule-vars):
    ^rule-vars << name text

  `(~g t(~val, ~(name text to-s)))

process-val(g, `(~a ~b)) =
  `(~g seq(~process-val(g, a), ~process-val(g, b)))

process-val(g, `(~a | ~b)) =
  process-val(g, `[~a, ~b])

process-val(g, `[~*xs]) = do:
  original = ^rule-vars
  new = Set new
  choices =
    xs collect [x]:
      let(rule-vars = original dup):
        choice = process-val(g, x)
        new merge(^rule-vars - original)
        choice

  ^rule-vars merge(new)

  `(~g any(~*choices))

process-val(g, a: `{ ~*bs }) =
  if(^actions)
    then:
      vars = ^rule-vars to-a
      call = "actions[" + ^actions size to-s + "][" + vars collect .to-s join(", ") + "]"
      ^actions << [a, vars]
      `(~g action(~call))
    else:
      `(~g action({ ~*bs }))

process-val(g, `(<(~x)>)) = do:
  val = process-val(g, x)

  when(^rule-vars):
    ^rule-vars << .text

  `(~g collect(~val))

process-val(g, `(@<(~x)>)) =
  `(~g bounds(~process-val(g, x)))

process-val(g, s: Atomy AST StringLiteral) =
  `(~g str(~s))

process-val(g, `(/(~(b: Atomy AST StringLiteral))/)) =
  if(^actions)
    then:
      vars = ^rule-vars to-a

      -- this is a bit gross because it has to parse as a valid regexp
      -- so we use .call() because actions[0][] is invalid
      --
      -- should be fine as the embedded parts are limited to numbers and words
      call =
        "#{actions[" + ^actions size to-s +
          "].call(" + vars collect .to-s join(", ") + ")}"

      ^actions << [`{ ~(intp interpolated(b raw)) }, vars]

      `(~g reg(~call))
    else:
      `(~g reg(~(b raw)))

process-val(g, c: Atomy AST Call) = do:
  args = "(" + c arguments collect .(pretty show(_)) join(", ") + ")"

  `(~g ref(~(c name text to-s), nil, ~args))

process-val(g, `@~(c: Atomy AST Call)) = do:
  args = "(" + c arguments collect .(pretty show(_)) join(", ") + ")"

  `(~g invoke(~(c name text to-s), ~args))

process-val(g, `^~(c: Atomy AST Call)) = do:
  args = "(" + c arguments collect .(pretty show(_)) join(", ") + ")"

  `(~g foreign-invoke("parent", ~(c name text to-s), ~args))

process-val(g, w: Atomy AST Word) =
  `(~g ref(~(w text to-s)))

process-val(g, `@~(w: Atomy AST Word)) = do:
  `(~g invoke(~(w text to-s)))

process-val(g, `^~(w: Atomy AST Word)) = do:
  `(~g foreign-invoke("parent", ~(w text to-s)))

process-val(g, `((~v)?)) =
  `(~g maybe(~process-val(g, v)))

process-val(g, `((~v)+)) =
  `(~g many(~process-val(g, v)))

process-val(g, `((~v)*)) =
  `(~g kleene(~process-val(g, v)))

process-val(g, `&~v) =
  `(~g andp(~process-val(g, v)))

process-val(g, `!~v) =
  `(~g notp(~process-val(g, v)))

process-val(g, '_) =
  `(~g dot)

process-val(_, s) =
  raise(ArgumentError, "unknown parsing operator:\n" + s inspect)

Atomy AST open:
  ast(ParserDefiner(@source))

  ParserDefiner bytecode(g, _) := do:
    g push-rubinius
    g push-literal(.__parser_init__)
    g push-literal(Rubinius Compiler compile-string(@source))
    g push-scope
    g push-self
    g send(.attach-method, 4)
    g pop

    g push-self
    g send(.__parser_init__, 0)


macro(grammar: ~*body): names [g]:
  b = body collect [n]:
    n match:
      `%%{ ~*xs } -> do:
        call =
          if(^setups)
            then:
              ^setups << `{ ~*xs }
              "setups[" + (^setups size - 1) to-s + "][]"
            else:
              `{ ~*xs }

        `(~g add-setup(~g action(~call)))

      `(%~name := ~const) ->
        `(~g add-foreign-grammar(~(name text to-s), ~const-name(const)))

      `(%~name = ~expr) -> do:
        call =
          if(^vars)
            then:
              ^vars << expr
              "vars[" + (^vars size - 1) to-s + "]"
            else:
              expr

        `(~g set-variable(~(name text to-s), call))

      `((~name)(~*args) := ~val) -> do:
        let(rule = name text,
            rule-vars = //Set new(args collect .text)):
          `(~g set(~(name text to-s)
                   ~process-val(g, val)
                   ~(args collect [x]: x text to-s)))

      `(~name := ~val) -> do:
        let(rule = name text,
            rule-vars = //Set new):
          `(~g set(~(name text to-s), ~process-val(g, val)))

      u ->
        raise("unknown toplevel grammar form:\n" + u inspect)

  `(//KPeg Grammar new tap [~g]: ~*b)


macro(parser(~name): ~*grammar):
  let(actions = [],
      setups = [],
      vars = []):
    g = eval(`(grammar: ~*grammar))

    acts =
      ^actions collect [action, as]:
        args = as collect [a]: init(Word, text: a)
        `([~*args] ~action)

    def =
      init(ParserDefiner):
        line: node line
        source:
          //KPeg CodeGenerator new(const-name(name), g) output

    `(do:
        ~name = //KPeg CompiledParser class:
          { self } setups := @setups ||= ~^setups
          { self } vars := @vars ||= ~^vars

          actions := @actions ||= ~acts

        ~def

        ~name)
