use(require("core"))
use(require("define"))
use(require("control-flow"))

require("atomy/pattern/class_variable")
require("atomy/pattern/instance_variable")
require("atomy/pattern/attribute")
require("atomy/pattern/or")

instance-variable-pattern-code = Atomy Code Pattern class:
  def(initialize(name)):
    instance-variable-set("@name", name)

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern Wildcard new))

  def(assign(gen)):
    gen set-ivar(("@" + @name to-s) to-sym)

pattern(@~(name & Word)):
  instance-variable-pattern-code new(name text)

pattern(@(~(name & Word))?):
  instance-variable-pattern-code new((name text to-s + "?") to-sym)

pattern(@(~(name & Word))!):
  instance-variable-pattern-code new((name text to-s + "!") to-sym)

kind-of-pattern-code = Atomy Code Pattern class:
  def(initialize(@parent, @constant)) {}

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern KindOf new(~@parent ~@constant)))

pattern(~parent ~(constant & Constant)):
  kind-of-pattern-code new(parent, constant)

attribute-pattern-code = Atomy Code Pattern class:
  def(initialize(@attribute, @receiver, @arguments)) {}

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern Attribute new(~@receiver, [~*@arguments])))

  def(assign(gen)):
    -- [value, pattern, value, pattern]
    gen dup-many(2)
    -- [pattern, value, value, pattern]
    gen swap
    -- [pattern, pattern, value, value, pattern]
    gen dup
    -- [receiver, pattern, value, value, pattern]
    gen send(.receiver, 0)
    -- [pattern, value, receiver, value, pattern]
    gen move-down(2)
    -- [[arguments], value, receiver, value, pattern]
    gen send(.arguments, 0)
    -- [<nil block>, [arguments], value, receiver, value, pattern]
    gen push-nil
    -- [assign result, value, pattern]
    gen set-call-flags(2) -- CALL_FLAG_CONCAT
    gen send-with-splat(((@attribute to-s) + "=") to-sym, 1)
    -- [value, pattern]
    gen pop

pattern(~receiver ~(attribute & Word)):
  attribute-pattern-code new(attribute text, receiver, [])

pattern(~receiver (~(attribute & Word))?):
  attribute-pattern-code new((attribute text to-s + "?") to-sym, receiver, [])

pattern(~receiver (~(attribute & Word))!):
  attribute-pattern-code new((attribute text to-s + "!") to-sym, receiver, [])

pattern(~receiver [~*arguments]):
  attribute-pattern-code new("[]" to-sym, receiver, arguments)

class-variable-pattern-code = Atomy Code Pattern class:
  def(initialize(@name)) {}

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern Wildcard new))

  def(assign(gen)):
    gen dup
    gen push-scope
    gen swap
    gen push-literal(("@@" + @name to-s) to-sym)
    gen swap
    gen send(.class-variable-set, 2)
    gen pop


pattern(@@~(name & Word)):
  class-variable-pattern-code new(name text)

pattern(@@(~(name & Word))?):
  class-variable-pattern-code new((name text to-s + "?") to-sym)

pattern(@@(~(name & Word))!):
  class-variable-pattern-code new((name text to-s + "!") to-sym)

pattern($~(name & Word)):
  pattern(`(//Rubinius Globals[~(Atomy Code Symbol new(("$" + name text to-s) to-sym))]))

pattern($(~(name & Word))?):
  pattern(`(//Rubinius Globals[~(Atomy Code Symbol new(("$" + (name text to-s + "?")) to-sym))]))

pattern($(~(name & Word))!):
  pattern(`(//Rubinius Globals[~(Atomy Code Symbol new(("$" + (name text to-s + "!")) to-sym))]))

pattern(nil):
  Atomy Code Pattern new(`(//Atomy Pattern Equality new(nil)))

pattern(true):
  Atomy Code Pattern new(`(//Atomy Pattern Equality new(true)))

pattern(false):
  Atomy Code Pattern new(`(//Atomy Pattern Equality new(false)))

pattern(~(x & StringLiteral)):
  Atomy Code Pattern new(`(//Atomy Pattern Equality new(~x)))

or-pattern-code = Atomy Code Pattern class:
  def(initialize(@a, @b)) {}

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern Or new(~@a, ~@b)))

  def(assign(gen)):
    done = gen new-label
    assign-b = gen new-label

    gen dup-many(2)
    gen swap
    gen send(.a, 0)
    gen swap
    gen send(.matches?, 1)
    gen gif(assign-b)

    gen dup-many(2)
    gen swap
    gen send(.a, 0)
    gen swap
    @a assign(gen)
    gen pop-many(2)

    gen goto(done)

    assign-b set!

    gen dup-many(2)
    gen swap
    gen send(.b, 0)
    gen swap
    @b assign(gen)
    gen pop-many(2)

    done set!

pattern(~a | ~b):
  or-pattern-code new(pattern(a), pattern(b))

Atomy Pattern open:
  self class(With):
    attr-reader(.block, .pattern)

    def(initialize(@block, @pattern)) {}

    def(matches?(val)):
      @pattern matches?(@block call-on-object(val))

    def(target):
      Object

with-pattern-code = Atomy Code Pattern class:
  def(initialize(@expr, @sub-pattern)) {}

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern With new({ ~@expr }, ~@sub-pattern)))

  def(assign(gen)):
    -- [value, pattern, value, pattern]
    gen dup-many(2)

    -- [pattern, value, value, pattern]
    gen swap

    -- [pattern, pattern, value, value, pattern]
    gen dup

    -- [with-block, pattern, value, value, pattern]
    gen send(.block, 0)

    -- [pattern, with-block, value, value, pattern]
    gen swap

    -- [with-pattern, with-block, value, value, pattern]
    gen send(.pattern, 0)

    -- [with-block, value, with-pattern, value, pattern]
    gen move-down(2)

    -- [value, with-block, with-pattern, value, pattern]
    gen swap

    -- [block-result, with-pattern, value, pattern]
    gen send(.call-on-object, 1)

    -- [block-result, with-pattern, value, pattern]
    @sub-pattern assign(gen)

    -- [value, pattern]
    gen pop-many(2)

pattern(with(~expr, ~pat)):
  with-pattern-code new(expr, pattern(pat))

Atomy Pattern open:
  self class(Predicate):
    def(initialize(@block)) {}

    def(matches?(val)):
      @block call-on-object(val)

    def(target):
      Object

pattern({ ~*pred-body }):
  Atomy Code Pattern new(`(//Atomy Pattern Predicate new({ ~*pred-body })))

Atomy Pattern open:
  self class(List):
    attr-reader(.patterns, .splat)

    def(initialize(@patterns, @splat)) {}

    def(matches?(val)):
      unless(val is-a?(Array)):
        return(false)

      when(@splat && (val size < @patterns size)):
        return(false)

      when(!@splat && (val size != @patterns size)):
        return(false)

      idx = 0
      mismatch = false
      @patterns each [p]:
        unless(p matches?(val[idx])):
          &mismatch = true
          -- TODO: break, or return false

        &idx = (idx + 1)

      if(mismatch)
        then: false
        else:

      if(@splat)
        then: @splat matches?(val drop(idx))
        else: true

    def(assign(scope, val)):
      idx = 0
      @patterns each [p]:
        p assign(scope, val[idx])
        &idx = (idx + 1)

      when(@splat):
        @splat assign(scope, val drop(idx))

list-pattern-code = Atomy Code Pattern class:
  def(initialize(patterns)):
    @patterns = []
    @splat = nil

    patterns each [p]:
      if(p splat?)
        then: @splat = p
        else: @patterns << p

  def(bytecode(gen, mod)):
    splat-node = (@splat || 'nil)
    mod compile(gen, `(//Atomy Pattern List new([~*@patterns], ~splat-node)))

  def(assign(gen)):
    -- [[value], pattern, [value], pattern]
    gen dup-many(2)

    -- [pattern, [value], [value], pattern]
    gen swap

    -- [[pattern], [value], [value], pattern]
    gen send(.patterns, 0)

    @patterns each with-index [p, i]:
      -- [pattern, [pattern], [value], [value], pattern]
      gen shift-array

      -- [[pattern], pattern, [value], [value], pattern]
      gen swap

      -- [[value], pattern, [pattern], [value], pattern]
      gen rotate(3)

      -- [value, [value], pattern, [pattern], [value], pattern]
      gen shift-array

      -- [[value], value, pattern, [pattern], [value], pattern]
      gen swap

      -- [value, pattern, [value], [pattern], [value], pattern]
      gen move-down(2)

      -- [value, pattern, [value], [pattern], [value], pattern]
      p assign(gen)

      -- [[value], [pattern], [value], pattern]
      gen pop-many(2)

      -- [[pattern], [value], [value], pattern]
      gen swap

    when(@splat):
      -- [[remaining values], [value], pattern]
      gen pop

      -- [[value], [remaining values], pattern]
      gen swap

      -- [pattern, [remaining values], [value]]
      gen rotate(3)

      -- [pattern, pattern, [remaining values], [value]]
      gen dup

      -- [splat pattern, pattern, [remaining values], [value]]
      gen send(.splat, 0)

      -- [splatted pattern, pattern, [remaining values], [value]]
      gen send(.pattern, 0)

      -- [pattern, [remaining values], splatted pattern, [value]]
      gen move-down(2)

      -- [[remaining values], splatted pattern, [value], pattern]
      gen move-down(3)

      -- [[remaining values], splatted pattern, [value], pattern]
      @splat assign(gen)

    -- either pop the splatted values/pattern, or the two empty arrays if no splat
    -- [[value], pattern]
    gen pop-many(2)

-- list-pattern
pattern([~*pats]):
  list-pattern-code new(pats collect [p]: pattern(p))

match = class:
  def(initialize(@node, @branches)) {}

  def(bytecode(gen, mod)):
    gen create-block(build-block(gen state scope, mod))
    mod compile(gen, @node)
    gen send(.call, 1)


  def(build-block(scope, mod)):
    Atomy Compiler generate(mod file) [blk]:
      -- close over the outer scope
      blk state scope parent = scope

      blk total-args = 1
      blk required-args = 1
      blk arity = 1

      pairs = @branches collect [`(~pat: ~*body)]:
        [mod pattern(pat), `(do: ~*body)]

      -- create a local for the value being matched against
      blk state scope new-local(."arg:match-value")

      -- [node]
      blk push-local(0)

      done = blk new-label

      pairs each [pat, body]:
        skip = blk new-label

        -- [pattern, node]
        mod compile(blk, pat)

        -- [pattern, node, pattern, node]
        blk dup-many(2)

        -- [node, pattern, pattern, node]
        blk swap

        -- [bool, pattern, node]
        blk send(.matches?, 1)

        -- [pattern, node]
        blk gif(skip)

        -- [node, pattern]
        blk swap

        -- [node, pattern]
        pat assign(blk)

        -- []
        blk pop-many(2)

        -- [value]
        mod compile(blk, body)

        -- [value]
        blk goto(done)

        -- [pattern, node]
        skip set!

        -- [node]
        blk pop

      -- []
      blk pop

      -- [value]
      blk push-nil

      -- [value]
      done set!

  def(assignment-local(gen, name)):
    var = gen state scope search-local(name)

    if(var && (var depth == 0))
      then: [var, false]
      else: [gen state scope new-local(name) nested-reference, true]


macro(~x match: ~*branches):
  match new(x, branches)

rescue = class:
  def(initialize(@node, @branches)) {}

  -- TODO: this is pretty barebones compared to:
  -- https://github.com/rubinius/rubinius-ast/blob/aa5ff6260a7647a9ef1035feb66b6d4b632d4211/lib/rubinius/ast/exceptions.rb
  -- i'd rather prove out the complexity than blindly mirror it
  def(bytecode(gen, mod)):
    ok = gen new-label
    ex = gen new-label
    rescued = gen new-label

    -- []
    gen setup-unwind(ex, 0) -- RescueType

    -- [value]
    mod compile(gen, @node)

    -- [value]
    gen pop-unwind

    -- [value]
    gen goto(ok)

    ex set!

    -- []
    -- gen pop

    -- [exc_state]
    gen push-exception-state

    -- [block, exc_state]
    gen create-block(build-block(gen state scope, mod))

    -- [exc, block, exc_state]
    gen push-current-exception

    -- [value, exc_state]
    gen send(.call, 1)

    -- [value, value, exc_state]
    gen dup

    -- [value, exc_state]
    gen goto-if-not-undefined(rescued)

    -- [exc_state]
    gen pop

    -- []
    gen restore-exception-state

    -- []
    gen reraise

    -- [value, exc_state]
    rescued set!

    -- [exc_state, value]
    gen swap

    -- [value]
    gen pop

    -- [value]
    ok set!

  def(build-block(scope, mod)):
    Atomy Compiler generate(mod file) [blk]:
      -- close over the outer scope
      blk state scope parent = scope

      blk total-args = 1
      blk required-args = 1
      blk arity = 1

      pairs = @branches collect [`(~pat: ~*body)]:
        [mod pattern(pat), `(do: ~*body)]

      -- create a local for the value being matched against
      blk state scope new-local(."arg:match-value")

      -- [node]
      blk push-local(0)

      done = blk new-label

      pairs each [pat, body]:
        skip = blk new-label

        -- [pattern, node]
        mod compile(blk, pat)

        -- [pattern, node, pattern, node]
        blk dup-many(2)

        -- [node, pattern, pattern, node]
        blk swap

        -- [bool, pattern, node]
        blk send(.matches?, 1)

        -- [pattern, node]
        blk gif(skip)

        -- [node, pattern]
        blk swap

        -- [node, pattern]
        pat assign(blk)

        -- []
        blk pop-many(2)

        -- [value]
        mod compile(blk, body)

        -- [value]
        blk goto(done)

        -- [pattern, node]
        skip set!

        -- [node]
        blk pop

      -- []
      blk pop

      -- [value]
      blk push-undef

      -- [value]
      done set!

  def(assignment-local(gen, name)):
    var = gen state scope search-local(name)

    if(var && (var depth == 0))
      then: [var, false]
      else: [gen state scope new-local(name) nested-reference, true]

macro(~x rescue: ~*branches):
  rescue new(x, branches)
