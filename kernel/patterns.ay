use(require("core"))
use(require("define"))

require("atomy/pattern/index")
require("atomy/pattern/instance_variable")
require("atomy/pattern/attribute")

pattern(~parent ~(constant & Constant)):
  Atomy Code Pattern new(`(//Atomy Pattern KindOf new(~parent ~constant)), [])

pattern(~receiver ~(attribute & Word)):
  Atomy Code Pattern new(`(//Atomy Pattern Attribute new('~attribute text, ~receiver)), [])

pattern(~receiver [~*arguments]):
  Atomy Code Pattern new(`(//Atomy Pattern Index new(~receiver, [~*arguments])), [])

pattern(@~(name & Word)):
  Atomy Code Pattern new(`(//Atomy Pattern InstanceVariable new('~name text)), [])

pattern(~a | ~b):
  a-pattern = pattern(a)
  b-pattern = pattern(b)

  Atomy Code Pattern new(
      `(//Atomy Pattern Or new(~a-pattern, ~b-pattern))
      a-pattern locals + b-pattern locals)

Atomy Pattern open:
  const-set(.With, class:
    def(initialize(@block, @pattern)) {}

    def(matches?(val)):
      @pattern matches?(@block call-on-object(val))

    def(assign(scope, val)):
      @pattern assign(scope, @block call-on-object(val))
  )

pattern(with(~expr, ~pat)):
  sub-pattern = pattern(pat)

  Atomy Code Pattern new(
    `(//Atomy Pattern With new({ ~expr }, ~sub-pattern))
    sub-pattern locals)
