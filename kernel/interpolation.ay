use("core")
use("define")
use("control-flow")
use("quotes")
use("range")
use("grammar")
use("patterns")
use("node")
use("init")

parser(Parser):
  %atomy := Atomy Parser

  root := %atomy(wsp) es=(%atomy(expressions)) %atomy(wsp) "}" {
    init(Atomy AST Tree, nodes: Array(es))
  }


intp-segments(s) =
  s split(Regexp new("(?<!\\\\)#\\{"), 2) match:
    [] -> ['""]

    [x] -> [x to-node]

    [pre, chunk]:
      p = Parser new(chunk)

      unless(p parse):
        p raise-error

      segments = [pre to-node, `(~(p result) to-s)]

      rest = p string [p pos .. -1]

      rest match:
        nil -> segments
        "" -> segments
        _ -> segments + intp-segments(rest)

Atomy AST open:
  ast(Interpolation([.segments]))

  Interpolation interpolated? := @segments size > 1

  Interpolation bytecode(g, mod) := do:
    pos(g)

    @segments each [s]:
      mod compile(g, s)

    when(interpolated?):
      g string-build(@segments size)


interpolated(x) :=
  init(Atomy AST Interpolation, segments: intp-segments(x))

macro-quoter(i) [_, _, v]: interpolated(v)

-- symbol literals with interpolation
macro(.~(x: StringLiteral)):
  i = interpolated(x value)
  if(i interpolated?)
    then: `(~i to-sym)
    else: init(Literal, value: x value to-sym)
