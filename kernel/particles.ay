use("core")
use("define")
use("data")
use("control-flow")
use("cosmetics")
use("patterns")

data(Particle(@receiver, @message, @arguments))

Particle call(*args) &blk := to-proc [*args] &blk

Particle open:
  alias-method(.[], .call)

Particle to-proc := [*args] &blk:
  [recv, cur] =
    if(@receiver equal(_)?)
      then: [args[0], 1]
      else: [@receiver, 0]

  filled =
    @arguments collect [v]:
      if(v equal(_)? and args size >= cur)
        then:
          cur += 1
          args[cur - 1]
        else:
          v

  recv __send__(@message, *filled) &blk

Particle arity :=
  (@receiver . @arguments) select .equal(_)? size

Symbol call(*args) &blk := to-proc [*args] &blk

Symbol arity := 1

macro(.[~*(as: _ . _)]):
  `(Particle new(_, .[], ~as))

macro(.((~x)(~*as))):
  `(Particle new(_, .~x, ~as))

macro(.((~x)(~*as))?):
  `(Particle new(_, .(~x)?, ~as))

macro(.((~x)(~*as))!):
  `(Particle new(_, .(~x)!, ~as))

macro(.(~r (~x)(~*as))):
  `(Particle new(~r, .~x, ~as))

macro(.(~r (~x)(~*as))?):
  `(Particle new(~r, .(~x)?, ~as))

macro(.(~r (~x)(~*as))!):
  `(Particle new(~r, .(~x)!, ~as))

macro(.(~r [~*as])):
  `(Particle new(~r, .[], ~as))

macro(.~(x: Infix)):
  `(Particle new(
      ~(if(x private)
          then: '_
          else: x left)
      ~(x operator)
      [~(x right)]))


Atomy Patterns open:
  Particle = Pattern class:
    children(.receiver, .arguments)
    attributes(.message)

    target(g, mod) :=
      mod compile(g, 'Particle)

    matches(g, mod)? := do:
      mismatch = g new-label
      done = g new-label

      g dup
      target(g, mod)
      g swap
      g kind-of
      g gif(mismatch)

      g dup
      g send(.message, 0)
      g push-literal(@message)
      g send(."==", 1)
      g gif(mismatch)

      g dup
      g send(.receiver, 0)
      @receiver matches(g, mod)?
      g gif(mismatch)

      g send(.arguments, 0)
      @arguments matches(g, mod)?
      g dup
      g git(done)

      mismatch set!
      g pop
      g push-false

      done set!

    deconstruct(g, mod, locals = Hash new) := do:
      g dup
      g send(.receiver, 0)
      @receiver deconstruct(g, mod, locals)

      g send(.arguments, 0)
      @arguments deconstruct(g, mod, locals)


pattern(`.(~r [~*as])):
  Atomy Patterns Particle new(
    pattern(r)
    .[]
    pattern(`[~*as]))

pattern(`.[]):
  Atomy Patterns Literal new(.[])

pattern(`.[~*as]):
  Atomy Patterns Particle new(
    pattern('_)
    .[]
    pattern(`[~*as]))

pattern(`.~(x: Atomy AST Infix)):
  Atomy Patterns Particle new(
    if(x private)
      then: pattern('_)
      else: pattern(x left)
    pattern(`[~(x right)])
    x operator)

pattern(`.((~(x: Atomy AST Word))(~*as))):
  Atomy Patterns Particle new(
    pattern('_)
    pattern(`[~*as])
    x text)

pattern(`.((~(x: Atomy AST Word))(~*as)?)):
  Atomy Patterns Particle new(
    pattern('_)
    pattern(`[~*as])
    `((~x)?) to-word text)

pattern(`.((~(x: Atomy AST Word))(~*as)!)):
  Atomy Patterns Particle new(
    pattern('_)
    pattern(`[~*as])
    `((~x)!) to-word text)

pattern(`.(~r (~(x: Atomy AST Word))(~*as))):
  Atomy Patterns Particle new(
    pattern(r)
    pattern(`[~*as])
    x text)

pattern(`.(~r (~(x: Atomy AST Word))(~*as)?)):
  Atomy Patterns Particle new(
    pattern(r)
    pattern(`[~*as])
    `((~x)?) to-word text)

pattern(`.(~r (~(x: Atomy AST Word))(~*as)!)):
  Atomy Patterns Particle new(
    pattern(r)
    pattern(`[~*as])
    `((~x)!) to-word text)
