use(require("core"))
use(require("define"))
use(require("data"))
use(require("control-flow"))
use(require("patterns"))

data(Particle(@receiver, @message, @arguments))

def(Particle call(*args) &blk):
  to-proc call(*args) &blk

Particle open:
  alias-method(.[], .call)

def(Particle to-proc):
  [*args] &blk:
    unless(args size >= arity):
      raise(ArgumentError new((("given " + args size to-s) + ", expected ") + arity to-s))

    [recv, cur] =
      if(@receiver equal?(_))
        then: [args[0], 1]
        else: [@receiver, 0]

    filled =
      @arguments collect [v]:
        if(v equal?(_) && (args size >= cur))
          then:
            cur += 1
            args[cur - 1]
          else:
            v

    recv __send__(@message, *filled) &blk

def(Particle arity):
  required-args = 0
  when(@receiver equal?(_)):
    required-args += 1

  @arguments each [v]:
    when(v equal?(_)):
      required-args += 1

  required-args

def(Particle == other):
  other is-a?(self class) && (
    (other receiver == @receiver) && (
      (other message == @message) && (
        other arguments == @arguments)))

def(Symbol call(recv)): to-proc call(recv)

def(Symbol arity): 1

macro(.[~a, ~*as]):
  `(Particle new(_, .[], [~a, ~*as]))

macro(.((~x)(~*as))):
  `(Particle new(_, .~x, [~*as]))

macro(.(~r (~x)(~*as))):
  `(Particle new(~r, .~x, [~*as]))

macro(.(~r [~*as])):
  `(Particle new(~r, .[], [~*as]))

macro(.~(x & Infix)):
  `(Particle new(
      ~(x left || '_)
      .~(StringLiteral new(x operator to-s))
      [~(x right)]))

particle-klass = Particle

Atomy Pattern open:
  self data(Particle(@receiver, @message, @arguments))

  def(Particle target): particle-klass

  def(Particle matches?(value)):
    when(value is-a?(Symbol)):
      &value = particle-klass new(_, value, [])

    unless(value is-a?(particle-klass)):
      return(false)

    when(value message != @message):
      return(false)

    unless(@receiver matches?(value receiver)):
      return(false)

    @arguments matches?(value arguments)

  def(Particle assign(scope, value)):
    when(value is-a?(Symbol)):
      &value = particle-klass new(_, value, [])

    @receiver assign(scope, value receiver)
    @arguments assign(scope, value arguments)

particle-pattern-code = Atomy Code Pattern class:
  def(initialize(@receiver, @message, @arguments)) {}

  def(bytecode(gen, mod)):
    mod compile(gen, `(//Atomy Pattern Particle new(
      ~@receiver
      ~@message
      ~@arguments
    )))

  def(assign(gen)):
    assign-symbol = gen new-label
    done = gen new-label

    gen dup
    gen push-cpath-top
    gen find-const(.Symbol)
    gen swap
    gen kind-of
    gen git(assign-symbol)

    gen dup-many(2)
    gen send(.receiver, 0)
    gen swap
    gen send(.receiver, 0)
    gen swap
    @receiver assign(gen)
    gen pop-many(2)

    gen dup-many(2)
    gen send(.arguments, 0)
    gen swap
    gen send(.arguments, 0)
    gen swap
    @arguments assign(gen)
    gen pop-many(2)

    gen goto(done)

    assign-symbol set!

    gen dup-many(2)
    gen pop
    gen send(.receiver, 0)
    gen push-undef
    @receiver assign(gen)
    gen pop-many(2)

    gen dup-many(2)
    gen pop
    gen send(.arguments, 0)
    gen make-array(0)
    @arguments assign(gen)
    gen pop-many(2)

    done set!

pattern(.(~r [~*as])):
  particle-pattern-code new(
    pattern(r)
    .[]
    pattern(`[~*as]))

pattern(.[]):
  Atomy Code Pattern new(`(Atomy Pattern Equality new(.[])))

pattern(.~(x & Word)):
  Atomy Code Pattern new(`(Atomy Pattern Equality new(.~x)))

pattern(.(~(x & Word))!):
  Atomy Code Pattern new(`(Atomy Pattern Equality new(.(~x)!)))

pattern(.(~(x & Word))?):
  Atomy Code Pattern new(`(Atomy Pattern Equality new(.(~x)?)))

pattern(.[~a, ~*as]):
  particle-pattern-code new(pattern('_), '.[], pattern(`[~a, ~*as]))

pattern(.~(x & Infix)):
  particle-pattern-code new(pattern(x left || '_), `.~(StringLiteral new(x operator to-s)), pattern(`[~(x right)]))

pattern(.((~x)(~*as))):
  particle-pattern-code new(pattern('_), `.~x, pattern(`[~*as]))

pattern(.(~r (~x)(~*as))):
  particle-pattern-code new(pattern(r), `.~x, pattern(`[~*as]))
