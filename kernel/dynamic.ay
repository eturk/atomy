use("core")
use("define")
use("control-flow")
use("array")

Dynvar = class:
  initialize(@name, @default = nil) := nil

^Dynvar := get or @default
Dynvar get := Thread current[@name]
Dynvar set(x) := Thread current[@name] = x

macro(dynamic): `dynamic()
macro(dynamic(~(root = 'nil))):
  names [local]:
    `(Dynvar new(~(local text), ~root))

macro(let(~*bindings) { ~*body }):
  tmps = bindings zip(names(bindings size))

  save = `(~tmp = ~n get) for [`(~n = ~_), tmp] in tmps

  set = `(~n set(~v)) for `(~n = ~v) in bindings

  restore = `(~n set(~tmp)) for(`(~n = ~_), tmp) in(tmps)

  `(do:
      ~*save
      { ~*set
        ~*body
      } ensuring: ~*restore)
