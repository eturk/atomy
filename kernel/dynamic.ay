use(require("core"))
use(require("define"))
use(require("control-flow"))
use(require("data"))
use(require("hash"))

data(Dynvar(@default))

def(^Dynvar): values fetch(Thread current): @default
def(Dynvar get): values fetch(Thread current): _
def(Dynvar set(x)):
  if(x == _)
    then: values delete(Thread current)
    else: values[Thread current] = x

-- TODO: this should be private
def(Dynvar values): @values = (@values || #{})

macro(dynamic): `dynamic(_)
macro(dynamic(~default)): `(Dynvar new(~default))

stack-local = class:
  setter = class:
    def(initialize(@local, @code)) {}

    def(bytecode(gen, mod)):
      mod compile(gen, @code)
      gen set-stack-local(@local allocate(gen))

  def(bytecode(gen, mod)):
    gen push-stack-local(allocate(gen))

  def(allocate(gen)):
    @stack-local = (@stack-local || gen new-stack-local)

  def(set(code)):
    setter new(self, code)


macro(with(~*bindings): ~*body):
  tmps = bindings collect [b]: [b, stack-local new]

  save = tmps collect [[`(~n = ~_), tmp]]: tmp set(`(~n get))

  set = bindings collect [`(~n = ~v)]: `(~n set(~v))

  restore = tmps collect [[`(~n = ~_), tmp]]: `(~n set(~tmp))

  `(do:
      ~*save
      do {
        ~*set
        ~*body
      } ensuring: ~*restore)
