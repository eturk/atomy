use(require("core"))
use(require("define"))
use(require("control-flow"))
use(require("data"))
use(require("hash"))

stack-local = require("stack-local")

data(Dynvar(@default))

def(^Dynvar): values fetch(Thread current): @default
def(Dynvar get): values fetch(Thread current): _
def(Dynvar set(x)):
  if(x == _)
    then: values delete(Thread current)
    else: values[Thread current] = x

-- TODO: this should be private
def(Dynvar values): @values = (@values || #{})

macro(dynamic): `dynamic(_)
macro(dynamic(~default)): `(Dynvar new(~default))

macro(with(~*bindings): ~*body):
  tmps = bindings collect [b]: [b, stack-local Local new]

  save = tmps collect [`(~n = ~_), tmp]: tmp set(`(~n get))

  set = bindings collect [`(~n = ~v)]: `(~n set(~v))

  restore = tmps collect [`(~n = ~_), tmp]: `(~n set(~tmp))

  `(do:
      ~*save
      do {
        ~*set
        ~*body
      } ensuring: ~*restore)
