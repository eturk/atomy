use("core")
use("define")
use("node")
use("init")

pairs = require("pairs")

infix("<- ->", 20, .right)
infix("while until", 5, .right)
infix("if unless", 5, .right)
infix("<=> < <= >= >", 60)
infix("== !=", 50)
infix("&& and", 40)
infix("|| or", 30)
infix("not", 45, .right)


macro(condition ~(b: Block)):
  pairs from(b contents) reverse inject('nil) [acc, [x, y]]:
    `(if(~x) then: ~y; else: ~acc)

macro(~val match ~(b: Block)):
  branches = pairs from(b contents) collect [x, y]:
    init(MatchBranch, line -> x line, pattern -> x, branch -> y)

  init(Match, target -> val, branches -> branches)

macro(~x rescue ~(y: Block)):
  branches = pairs from(y contents) collect [p, e]:
    init(RescueHandler, line -> p line, pattern -> p, body -> e)

  init(Rescue, body -> x caller, handlers -> branches)

macro(~x rescue ~(y: Block) else ~(z: Block)):
  branches = pairs from(y contents) collect [p, e]:
    init(RescueHandler, line -> p line, pattern -> p, body -> e)

  init(Rescue, body -> x caller, handlers -> branches, else -> z body)


Atomy AST open:
  ast:
    And(.a, .b)
    Or(.a, .b)
    Negate(.expression)

  And bytecode(g, mod) := do:
    pos(g)
    done = g new-label
    no = g new-label

    mod compile(g, @a)
    g dup
    g gif(done)

    g pop
    mod compile(g, @b)

    done set!

  Or bytecode(g, mod) := do:
    pos(g)
    done = g new-label

    mod compile(g, @a)
    g dup
    g git(done)

    g pop
    mod compile(g, @b)

    done set!

  Negate bytecode(g, mod) := do:
    pos(g)
    done = g new-label
    yes = g new-label

    mod compile(g, @expression)
    g git(yes)

    g push-true
    g goto(done)

    yes set!
    g push-false

    done set!


macro(~a and ~b): init(And, a -> a, b -> b)
macro(~a && ~b): init(And, a -> a, b -> b)

macro(~a or ~b): init(Or, a -> a, b -> b)
macro(~a || ~b): init(Or, a -> a, b -> b)

macro(not ~e): init(Negate, expression -> e)
macro(!~e): init(Negate, expression -> e)

macro(~a != ~b): `!(~a == ~b)
macro(~a !~ ~b): `!(~a =~ ~b)
macro(~x ||= ~y): `(~x =! (~x || ~y))
macro(~x &&= ~y): `(~x =! (~x && ~y))


macro(~x if ~y): `(when(~y): ~x)
macro(~x unless ~y): `(unless(~y): ~x)

macro(if(~x) then ~(y: Block) else ~(z: Block)):
  init(IfThenElse, condition -> x, then -> y body, else -> z body)

macro(otherwise): 'true

macro(return(~y)): init(Return, value -> y)

macro(~x ensuring ~(y: Block)):
  init(Ensure, body -> x caller, ensure -> y body)

macro(when(~c) ~(b: Block)):
  `(if(~c) then ~b else: nil)

macro(unless(~c) ~(b: Block)):
  `(if(~c) then: nil; else ~b)



Atomy AST open:
  ast:
    Break(.value)
    Next(.value)

  Break bytecode(g, mod) := do:
    pos(g)
    mod compile(g, @value)
    g raise-break

  Next bytecode(g, mod) := do:
    pos(g)
    mod compile(g, @value)
    g ret


macro(break):
  init(Break, value: 'nil)

macro(break(~x)):
  init(Break, value: x)

macro(next):
  init(Next, value: 'nil)

macro(next(~x)):
  init(Next, value: x)


Atomy AST open:
  ast:
    Super([.arguments], .splat?, .block?)

  Super bytecode(g, mod) := do:
    pos(g)

    @arguments each [a]:
      mod compile(g, a)

    when(@splat):
      mod compile(g, @splat)
      g cast-array

    if(@block)
      then: mod compile(g, @block)
      else: g push-nil

    name = nil
    when(g state super?):
      name =! g state super name

    g send-super(name, @arguments size, !!@splat)

macro(super):
  Super new

splat-from(arguments) = do:
  args = arguments dup

  splat =
    if(args last is-a(Atomy AST Prefix)? and
        args last receiver == "*" to-sym)
      then: args pop receiver
      else: nil

  [args, splat]

macro(super &~blk):
  init(Super, block: blk)

macro(super ~(blk: Block)):
  init(Super, block: blk)

macro(super(~*pRiNcEsS)):
  [args, splat] = splat-from(pRiNcEsS)
  init(Super, arguments -> args, splat -> splat)

macro(super(~*as) ~(blk: Block)):
  [args, splat] = splat-from(as)
  init(Super, arguments -> args, splat -> splat, block -> blk)

macro(super(~*as) &~blk):
  [args, splat] = splat-from(as)
  init(Super, arguments -> args, splat -> splat, block -> blk)
