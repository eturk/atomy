use(require("core"))
use(require("define"))

and = class:
  def(initialize(a, b)):
    instance-variable-set("@a", a)
    instance-variable-set("@b", b)

  def(bytecode(gen, mod)):
    done = gen new-label

    mod compile(gen, @a)
    gen dup
    gen gif(done)

    gen pop
    mod compile(gen, @b)

    done set!

macro(~a && ~b):
  and new(a, b)

or = class:
  def(initialize(a, b)):
    instance-variable-set("@a", a)
    instance-variable-set("@b", b)

  def(bytecode(gen, mod)):
    done = gen new-label

    mod compile(gen, @a)
    gen dup
    gen git(done)

    gen pop
    mod compile(gen, @b)

    done set!

macro(~a || ~b):
  or new(a, b)

if-then-else = class:
  def(initialize(if, then, else)):
    instance-variable-set("@if", if)
    instance-variable-set("@then", then)
    instance-variable-set("@else", else)

  def(bytecode(gen, mod)):
    else = gen new-label
    done = gen new-label

    mod compile(gen, @if)
    gen gif(else)

    mod compile(gen, @then)
    gen goto(done)

    else set!
    mod compile(gen, @else)

    done set!

macro(if(~x) then: ~*y; else: ~*z):
  if-then-else new(x, `(do: ~*y), `(do: ~*z))

macro(when(~x): ~*y):
  `(if(~x) then: ~*y; else: nil)

macro(unless(~x): ~*y):
  `(if(~x) then: nil; else: ~*y)

negate = class:
  def(initialize(node)):
    instance-variable-set("@node", node)

  def(bytecode(gen, mod)):
    done = gen new-label
    yes = gen new-label

    mod compile(gen, @node)
    gen git(yes)

    gen push-true
    gen goto(done)

    yes set!
    gen push-false

    done set!

macro(!~node):
  negate new(node)

return-class = class:
  def(initialize(node)):
    instance-variable-set("@node", node)

  def(bytecode(gen, mod)):
    mod compile(gen, @node)
    gen ret

macro(return): return-class new('nil)
macro(return(~node)): return-class new(node)

ensure = class:
  def(initialize(node, ensured)):
    instance-variable-set("@node", node)
    instance-variable-set("@ensured", ensured)

  -- TODO: this is pretty barebones compared to:
  -- https://github.com/rubinius/rubinius-ast/blob/aa5ff6260a7647a9ef1035feb66b6d4b632d4211/lib/rubinius/ast/exceptions.rb
  -- i'd rather prove out the complexity than blindly mirror it
  def(bytecode(gen, mod)):
    ok = gen new-label
    ex = gen new-label

    gen setup-unwind(ex, 1) -- EnsureType

    mod compile(gen, @node)

    gen pop-unwind
    gen goto(ok)

    ex set!
    gen push-exception-state
    mod compile(gen, @ensured)
    gen pop
    gen restore-exception-state
    gen reraise

    ok set!
    mod compile(gen, @ensured)
    gen pop

macro(~node ensuring: ~*ensured):
  ensure new(node, `(do: ~*ensured))

macro(~x ||= ~y): `(~x =! (~x || ~y))
macro(~x &&= ~y): `(~x =! (~x && ~y))

super-code = class:
  def(initialize(form)):
    structure = Atomy MessageStructure new(form)
    instance-variable-set("@arguments", structure arguments)
    instance-variable-set("@splat_argument", structure splat-argument)
    instance-variable-set("@proc_argument", structure proc-argument)
    instance-variable-set("@block", structure block)

  def(bytecode(gen, mod)):
    @arguments each [a]:
      mod compile(gen, a)

    when(@splat-argument):
      mod compile(gen, @splat-argument)
      gen cast-array

    if(@block)
      then:
        mod compile(
          gen
          Atomy Code Block new(
            `(do: ~*(@block body))
            @block arguments
            nil
            false
          )
        )
      else:
        if(@proc-argument)
          then: push-proc-argument(gen, mod)
          else: gen push-nil

    gen send-super(nil, @arguments size, !!@splat-argument)

  def(push-proc-argument(gen, mod)):
    nil-proc-arg = gen new-label
    mod compile(gen, @proc-argument)
    gen dup
    gen is-nil
    gen git(nil_proc_arg)
    gen push-cpath-top
    gen find-const(.Proc)
    gen swap
    gen send(.__from_block__, 1)
    nil-proc-arg set!

macro(super): super-code new('super)
macro(super(~*args)): super-code new(`super(~*args))
macro(super &~blk): super-code new(`(super &~blk))
macro(super: ~*blk): super-code new(`(super: ~*blk))
macro(super [~*bargs]: ~*blk): super-code new(`(super [~*bargs]: ~*blk))
macro(super(~*args) &~blk): super-code new(`(super(~*args) &~blk))
macro(super(~*args): ~*blk): super-code new(`(super(~*args): ~*blk))
macro(super(~*args) [~*bargs]: ~*blk): super-code new(`(super(~*args) [~*bargs]: ~*blk))

break-class = class:
  def(initialize(value)):
    instance-variable-set("@value", value)

  def(bytecode(gen, mod)):
    mod compile(gen, @value)
    gen raise-break

macro(break): break-class new('nil)
macro(break(~value)): break-class new(value)

next-class = class:
  def(initialize(value)):
    instance-variable-set("@value", value)

  def(bytecode(gen, mod)):
    mod compile(gen, @value)
    gen ret

macro(next): next-class new('nil)
macro(next(~value)): next-class new(value)

macro(condition: ~*branches):
  branches reverse inject('nil) [else, `(~cond: ~*branch)]:
    if(cond == 'otherwise)
      then: `(do: ~*branch)
      else: `(if(~cond) then: ~*branch; else: ~else)
