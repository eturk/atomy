use(require("core"))
use(require("define"))
use(require("patterns"))

and = class:
  def(initialize(@a, @b)) {}

  def(bytecode(gen, mod)):
    done = gen new-label

    mod compile(gen, @a)
    gen dup
    gen gif(done)

    gen pop
    mod compile(gen, @b)

    done set!

macro(~a && ~b):
  and new(a, b)

or = class:
  def(initialize(@a, @b)) {}

  def(bytecode(gen, mod)):
    done = gen new-label

    mod compile(gen, @a)
    gen dup
    gen git(done)

    gen pop
    mod compile(gen, @b)

    done set!

macro(~a || ~b):
  or new(a, b)

if-then-else = class:
  def(initialize(@if, @then, @else)) {}

  def(bytecode(gen, mod)):
    else = gen new-label
    done = gen new-label

    mod compile(gen, @if)
    gen gif(else)

    mod compile(gen, @then)
    gen goto(done)

    else set!
    mod compile(gen, @else)

    done set!

macro(if(~x) then: ~*y; else: ~*z):
  if-then-else new(x, `(do: ~*y), `(do: ~*z))

macro(when(~x): ~*y):
  `(if(~x) then: ~*y; else: nil)

macro(unless(~x): ~*y):
  `(if(~x) then: nil; else: ~*y)


while-loop = class:
  def(initialize(@condition, @body)) {}

  def(bytecode(gen, mod)):
    -- TODO: check_interrupts? how to test that?

    loop = gen new-label
    done = gen new-label

    loop set!

    mod compile(gen, @condition)
    gen gif(done)

    mod compile(gen, @body)
    gen pop
    gen goto(loop)

    done set!
    gen push-nil

macro(while(~condition): ~*body):
  while-loop new(condition, `(do: ~*body))


until-loop = class:
  def(initialize(@condition, @body)) {}

  def(bytecode(gen, mod)):
    -- TODO: check_interrupts? how to test that?

    loop = gen new-label
    done = gen new-label

    loop set!

    mod compile(gen, @condition)
    gen git(done)

    mod compile(gen, @body)
    gen pop
    gen goto(loop)

    done set!
    gen push-nil

macro(until(~condition): ~*body):
  until-loop new(condition, `(do: ~*body))
