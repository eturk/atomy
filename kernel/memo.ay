use("core")
use("array")
use("control-flow")
use("define")

macro(memo(~(name ? to-word)): ~*body):
  `(memo((~name)()): ~*body)

macro(memo((~name)(~*args)): ~*body):
  -- create an alias for each arg, to be used for the branch's patterns
  fakes = names(args size)
  kept-args = `(~f: ~a) for [f, a] in args zip(fakes)

  names [tmp]:
    define-memo =
      if(args empty?)
        -- no args; just redefine function
        then: `((~name)() =! ~tmp)

        -- has args; add pattern-matching branch
        else: `eval(`((~'~name)(~*~fakes) =! ~~tmp))

    `((~name)(~*kept-args) = do:
        ~tmp = do: ~*body

        ~define-memo

        ~tmp)
