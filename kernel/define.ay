use(require("core"))

require("atomy/message_structure")

-- function definition
macro(fn(~message): ~*body):
  structure = Atomy MessageStructure new(message)

  Atomy Code DefineFunction new(
    structure name
    `(do: ~*body)
    structure receiver
    structure arguments
    structure default-arguments
    structure splat-argument
    structure post-arguments
    structure proc-argument
  )

macro(fn(~dummy-message)):
  structure = Atomy MessageStructure new(dummy-message)
  Atomy Code DefineFunction new(structure name)


-- method definition
macro(def(~message): ~*body):
  structure = Atomy MessageStructure new(message)

  Atomy Code DefineMethod new(
    structure name
    `(do: ~*body)
    structure receiver
    structure arguments
    structure default-arguments
    structure splat-argument
    structure post-arguments
    structure proc-argument
  )

-- helper for adding a module to the constant scope
with-module = Class new:
  def(bytecode(gen, _)):
    gen push-self
    gen add-scope
    gen push-nil

-- module/class opening
macro(~x open: ~*body):
  `(~x module-eval:
      ~(with-module new)
      ~*body)

-- class creation
macro(class: ~*body): `(Object class: ~*body)

macro(~parent class: ~*body):
  `(//Class new(~parent) open:
      ~*body
      self)

-- singleton class opening
macro(singleton: ~*body): `(self singleton: ~*body)

macro(~x singleton: ~*body):
  `(~x singleton-class open: ~*body)

-- module creation
macro(module: ~*body):
  `(//Module new open:
      ~*body
      self)

-- variable mutation
macro(~(x & Word) += ~y): `(&~x = (~x + ~y))
macro(~(x & Word) -= ~y): `(&~x = (~x - ~y))
macro(~(x & Word) *= ~y): `(&~x = (~x * ~y))
macro(~(x & Word) **= ~y): `(&~x = (~x ** ~y))
macro(~(x & Word) /= ~y): `(&~x = (~x / ~y))
macro(~(x & Word) &= ~y): `(&~x = (~x & ~y))
macro(~(x & Word) |= ~y): `(&~x = (~x | ~y))

-- other (attribute, ivar) mutation
macro(~x += ~y): `(~x = (~x + ~y))
macro(~x -= ~y): `(~x = (~x - ~y))
macro(~x *= ~y): `(~x = (~x * ~y))
macro(~x **= ~y): `(~x = (~x ** ~y))
macro(~x /= ~y): `(~x = (~x / ~y))
macro(~x &= ~y): `(~x = (~x & ~y))
macro(~x |= ~y): `(~x = (~x | ~y))
