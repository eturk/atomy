use("core")

-- infix("=! := **= *= <<= >>= &&=", 10, .right)
-- infix("&= ||= |= += -= /= ^= %=", 10, .right)

-- macro(~x =! ~y):
--   Set new [n]:
--     n left = x
--     n right = y

macro((~name)(~*args) = ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = args
    d name = name text

macro((~name)(~*args) &~b = ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = args
    d name = name text
    d block = b

macro(~name &~b = ~body):
  DefineFunction new [d]:
    d body = body
    d name = name text
    d block = b

macro(~(x: `((~_)(~*_)?)) = ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)

macro(~(x: `((~_)(~*_)?)) &~b = ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)
    d block = b

macro(~(x: `((~_)(~*_)!)) = ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)

macro(~(x: `((~_)(~*_)!)) &~b = ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)

macro((~name)(~*args) =! ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = args
    d name = name text
    d set = true

macro((~name)(~*args) &~b =! ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = args
    d name = name text
    d block = b
    d set = true

macro(~(x: `((~_)(~*_)?)) =! ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)
    d set = true

macro(~(x: `((~_)(~*_)?)) &~b =! ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)
    d block = b
    d set = true

macro(~(x: `((~_)(~*_)!)) =! ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)
    d set = true

macro(~(x: `((~_)(~*_)!)) &~b =! ~body):
  DefineFunction new [d]:
    d body = body
    d arguments = arguments(x)
    d name = message-name(x)
    d set = true

arguments(b: Atomy AST Infix) = [b right]
arguments(? to-word) = []
arguments(Atomy AST Prefix) = []
arguments(Atomy AST Postfix) = []
arguments(`((~_)(~*args)?)) = args
arguments(`((~_)(~*args)!)) = args
arguments(c: Atomy AST Call) = c arguments
arguments(`(~_ (~_)(~*args)?)) = args
arguments(`(~_ (~_)(~*args)!)) = args
arguments(`(~_ (~_)(~*args))) = args
arguments(`(~_ ~(? to-word))) = []
arguments(`(~_ [~*args])) = args
arguments(`(~a &~_)) = arguments(a)
arguments(`/~x) = arguments(x)
arguments(`//~x) = arguments(x)
arguments(x) =
  raise(ArgumentError, "cannot get arguments from:\n" + x inspect)


receiver(b: Atomy AST Infix) = b left
receiver(p: Atomy AST Prefix) = p receiver
receiver(p: Atomy AST Postfix) = p receiver
receiver(? to-word) = Atomy AST Primitive new [n]: n value = .self
receiver(Atomy AST Call) = Atomy AST Primitive new [n]: n value = .self
receiver(`((~_)(~*_)?)) = Atomy AST Primitive new [n]: n value = .self
receiver(`((~_)(~*_)!)) = Atomy AST Primitive new [n]: n value = .self
receiver(`(~a &~_)) = receiver(a)
receiver(`(~a ~_)) = a
receiver(`/~_) = 'Self
receiver(`//~_) = 'Kernel
receiver(x) =
  raise(ArgumentError, "cannot get receiver from:\n" + x inspect)


message-name(b: Atomy AST Infix) = b operator
message-name(p: Atomy AST Prefix) = p message-name
message-name(p: Atomy AST Postfix) = p message-name
message-name(w: ? to-word) = w to-word text
message-name(`((~(w: Atomy AST Word))(~*_)?)) = (w text to-s + "?") to-sym
message-name(`((~(w: Atomy AST Word))(~*_)!)) = (w text to-s + "!") to-sym
message-name(`((~(w: Atomy AST Word))(~*_))) = w text
message-name(`(~_ ~(w: ? to-word))) = w to-word text
message-name(`(~_ (~(w: Atomy AST Word))(~*_))) = w text
message-name(`(~_ (~(w: Atomy AST Word))(~*_)?)) = (w text to-s + "?") to-sym
message-name(`(~_ (~(w: Atomy AST Word))(~*_)!)) = (w text to-s + "!") to-sym
message-name(`(~_ [~*_])) = .[]
message-name(`(~a &~_)) = message-name(a)
message-name(`/~x) = message-name(x)
message-name(`//~x) = message-name(x)
message-name(x) =
  raise(ArgumentError, "cannot get message-name from:\n" + x inspect)


block(`(~_ &~b)) = b
block(_) = nil


macro(~x := ~y):
  DefineMethod new [d]:
    d body = y
    d receiver = receiver(x)
    d arguments = arguments(x)
    d name = message-name(x)
    d block = block(x)

-- expose our helpers
{ self } arguments(x) := arguments(x)
{ self } receiver(x) := arguments(x)
{ self } message-name(x) := message-name(x)
{ self } block(x) := block(x)


macro(define(~x) ~(y: Block)):
  `(~x := ~(y body))

macro(~x **= ~y): `(~x =! (~x ** ~y))
macro(~x *= ~y): `(~x =! (~x * ~y))
macro(~x <<= ~y): `(~x =! (~x << ~y))
macro(~x >>= ~y): `(~x =! (~x >> ~y))
macro(~x &= ~y): `(~x =! (~x & ~y))
macro(~x |= ~y): `(~x =! (~x | ~y))
macro(~x += ~y): `(~x =! (~x + ~y))
macro(~x -= ~y): `(~x =! (~x - ~y))
macro(~x /= ~y): `(~x =! (~x / ~y))
macro(~x ^= ~y): `(~x =! (~x ^ ~y))
macro(~x %= ~y): `(~x =! (~x % ~y))

WithModule = Class new(Atomy AST Node)

WithModule bytecode(g, _) := do:
  pos(g)
  g push-self
  g add-scope
  g push-nil

macro(class: ~*body):
  `(//Class new open: ~*body, self)

macro(~super class: ~*body):
  `(//Class new(~super) open: ~*body, self)

macro(module: ~*body):
  `(//Module new open: ~*body, self)

macro(~x open: ~*body):
  `(~x module-eval:
      ~(WithModule new [n]: n line = node line)
      ~*body)

macro(~x singleton: ~*body):
  `(~x singleton-class open: ~*body)

macro(singleton: ~*body):
  `(self singleton-class open: ~*body)
