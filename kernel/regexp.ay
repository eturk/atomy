use("core")
use("define")
use("quotes")
use("patterns")
use("control-flow")
use("interpolation")
use("array")
use("init")


Atomy AST open:
  NthRef = Rubinius AST NthRef class:
    include(NodeLike)
    extend(SentientNode)
    attributes(.which)

    bytecode(g, _) := super(g)


macro($~(x: Primitive ? @value is-a(//Integer)? and @value > 0)):
  init(NthRef, which: x value)

macro-quoter(r) [r, fs]:
  flags = 0

  when(.m is-in fs):
    flags |= Regexp MULTILINE

  when(.i is-in fs):
    flags |= Regexp IGNORECASE

  when(.x is-in fs):
    flags |= Regexp EXTENDED

  -- UTF8 by default
  flags |= Regexp KCODE_UTF8

  `(//Regexp new(~interpolated(r), ~flags))
