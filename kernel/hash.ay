use("core")
use("define")
use("control-flow")
use("array")
use("node")

infix("<- ->", 20, .right)

hash-key-from(x) = x
hash-key-from(x: ? to-word) = `.~(x to-word)
hash-key-from(x: Atomy AST Compose) =
  if(x right is-a(Atomy AST Block)?)
    then: x
    else: hash-key-from(x right)

hash-pair-from(x) =
  raise("unknown pair `" + x inspect + "'")

hash-pair-from(`(~k -> ~v)) =
  [[k, v]]

hash-pair-from(p: `(~x { ~*ys })) = do:
  this = [[hash-key-from(x), `(do: ~*ys)]]

  if(x is-a(Atomy AST Compose)? and not x right is-a(Atomy AST Block)?)
    then: hash-pair-from(x left) + this
    else: this

hash-pairs-from(es) =
  (hash-pair-from(e) for e in es) flatten(1)


Atomy AST open:
  ast(HashLiteral([.keys], [.values]))

  HashLiteral bytecode(g, mod) := do:
    pos(g)

    g push-cpath-top
    g find-const(.Hash)
    g push-int(@keys size)
    g send(.new-from-literal, 1)

    @keys each-with-index [n, i]:
      g dup
      mod compile(g, n)
      mod compile(g, @values[i])
      g send(.[]=, 2)
      g pop


macro(#: ~*elements):
  pairs = hash-pairs-from(elements)
  keys = pairs collect [k, _]: k
  values = pairs collect [_, v]: v
  HashLiteral new(node line, keys, values)
