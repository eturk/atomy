use("core")
use("define")
use("control-flow")
use("array")
use("node")
use("init")

pairs = require("pairs")


infix("<- ->", 20, .right)


Atomy AST open:
  ast(HashLiteral([.keys], [.values]))

  HashLiteral bytecode(g, mod) := do:
    pos(g)

    g push-cpath-top
    g find-const(.Hash)
    g push-int(@keys size)
    g send(.new-from-literal, 1)

    @keys each-with-index [n, i]:
      g dup
      mod compile(g, n)
      mod compile(g, @values[i])
      g send(.[]=, 2)
      g pop


macro(#: ~*elements):
  keys = []
  values = []

  pairs from(elements) each [k, v]:
    keys << k
    values << v

  init(HashLiteral, keys -> keys, values -> values)
