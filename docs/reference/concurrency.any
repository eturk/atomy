#language anatomy

\use{anatomy/atomy}

\title{Concurrency}

\interaction{
  use("concurrency")
}{concurrency}

\define{
  me
}{Actor}{
  Get the current actor.
}

\section{Sending & Receiving}{
  \define{
    Actor <- v
  }{Actor}{
    Send message \code{v} to the actor.
  
    \example{
      a = spawn: receive \{ 42 -> .ok \} write
      a <- 42
      sleep(.01)
    }{concurrency}
  }

  \macro{
    receive: ~*branches
  }{receive}{any}{
    Receive a message sent to the current actor that matches any of the
    patterns listed in \hl{branches}. Blocks until a matching message is
    received. Non-matching messages are consumed and ignored.
  
    \example{
      a = spawn: receive \{ 1 -> .got-1 \} write
      a <- 0
      a <- 2
      a <- 1
      sleep(.01)
    }{concurrency}
  }

  \macro{
    receive \{ ~*branches \} after(~timeout): ~*body
  }{receive-after}{any}{
    Similar to \code{receive}, but with a timeout and an action to
    perform if it times out.
  
    \example{
      receive \{ 1 -> .ok \} after(0.01): .too-slow
    }{concurrency}
  }
}

\section{Spawning}{
  \define{
    spawn &action
  }{Actor}{
    Spawn a new actor, performing \code{action}.
  
    \example{
      spawn: (2 + 2) write
      sleep(.01)
    }{concurrency}
  }

  \define{
    spawn-link &action
  }{Actor}{
    Spawn a new actor, performing \code{action}, linked to the current
    actor.
  
    \example{
      spawn-link: (2 + 2) write
      sleep(.01)
    }{concurrency}
  }
}
