#!/usr/bin/env rbx
# vim: ft=ruby

require 'readline'
require 'optparse'
require 'profiler'

require File.expand_path("../../lib/atomy/boot", __FILE__)

options = {}

unless ARGV.empty? || ARGV[0][0] != ?-
  OptionParser.new do |o|
    o.banner = "usage: atomy [options]"

    o.on("-B", "--print-bytecode", "print out compiled bytecode") do |v|
      options[:debug] = v
    end

    o.on("-e", "--evaluate EXPR", "evaluate EXPR and print the result") do |v|
      options[:evaluate] = v
    end

    o.on("-s", "--before-start EXPR", "evaluate EXPR beforehand") do |v|
      options[:start] = v
    end

    o.on("-l", "--load FILE", "load FILENAME and start the REPL") do |v|
      options[:load] = v
    end

    o.on("-p", "--profile", "perform profiling") do
      options[:profile] = true
    end

    o.on_tail("-h", "--help", "show this message") do
      puts o
      exit
    end
  end.parse!
end

def run_atomy(options)
  if options[:profile]
    profiler = Rubinius::Profiler::Instrumenter.new
    profiler.start
  end

  if str = options[:evaluate] || options[:start]
    $0 = "(eval)"
    mod = Atomy::Module.new(:"(eval)")
    mod.use("atomy")
    res = mod.eval(str, options[:debug])

    if options[:evaluate]
      p(res)
      return
    end
  end

  if file = options[:load] || ARGV[0]
    $0 = file
    run = ARGV.shift
    Atomy.run(file, options[:debug])
    return if run
  end

  require("repl").repl(
    File.expand_path("~/.atomy_history"),
    nil,
    options[:debug]
  )
ensure
  if options[:profile]
    profiler.stop
    #data = profiler.info
    profiler.show
  end
end

run_atomy(options)
