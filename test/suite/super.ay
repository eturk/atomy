use("core")
use("control-flow")
use("define")
use("therie")

SuperA = class:
  test-1 := .super
  test-2(x) := [.super, x]
  test-3 &x := [.super, x call]
  test-4 &x := [.super, x call]
  test-5(x = 1) := [.super, x]
  test-6(x = 1) := [.super, x]
  test-7(x = 1) &y := [.super, x, y call]
  test-8(x) := [.super, x]

SuperB = SuperA class:
  test-1 := super()
  test-2(x) := super(x + 1)
  test-3 &x := super &x
  test-4 &x := super: x call + 1
  test-5(x = 0) := super(x + 1)
  test-6(x = 0) := super()
  test-7(x = 0) &y := super(x + 1) &y
  test-8(x) := { super(1) } call

describe("super"):
  it("resends the message to the superclass"):
    expect(SuperB new test-1) to be(.super)

  it("passes the same arguments to the superclass method"):
    expect(SuperB new test-2(1)) to be([.super, 2])

  it("passes the block to the superclass method"):
    expect(SuperB new test-3: 1;) to be([.super, 1])
    expect(SuperB new test-4: 1;) to be([.super, 2])

  it("passes a &block to the superclass method"):
    a = { 1 }
    expect(SuperB new test-3 &a) to be([.super, 1])
    expect(SuperB new test-4 &a) to be([.super, 2])

  it("sends with the subclass method's defaults"):
    expect(SuperB new test-5(2)) to be([.super, 3])
    expect(SuperB new test-5) to be([.super, 1])

  it("assumes superclass's defaults"):
    expect(SuperB new test-6) to be([.super, 1])

  it("handles both defaults and blocks"):
    expect(SuperB new test-7(3): 2;) to be([.super, 4, 2])
    expect(SuperB new test-7: 2;) to be([.super, 1, 2])

  it("works from inside of a block"):
    expect(SuperB new test-8(0)) to be([.super, 1])
