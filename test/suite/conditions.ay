use("core")
use("define")
use("control-flow")
use("patterns")
use("particles")

use("therie")
use("condition")

describe("condition"):
  describe(.signal):
    it("triggers matching handlers"):
      x = 0
      { signal(.foo) } bind: .foo -> (x =! 1)
      expect(x) to be(1)

    it("does not trigger non-matching handlers"):
      x = 0
      { signal(.foo) } bind: .bar -> (x =! 1)
      expect(x) to be(0)

    it("goes through all handlers, nearest-first"):
      x = []
      { { signal(.foo) } bind:
          .foo -> x << 1
      } bind:
        .foo -> x << 2

      expect(x) to be([1, 2])

    it("does not trigger active handlers"):
      a = 0
      { signal(.foo) } bind:
        _:
          a += 1
          when(a < 2):
            signal(.bar)

      expect(a) to be(1)

  describe(.restart):
    it("calls a named restart"):
      res =
        { with-restarts(ok -> 1):
            signal(.foo)
            0
        } bind: .foo -> restart(.ok)

      expect(res) to be(1)

    it("fails for an unknown restart name"):
      expect {
        { with-restarts(ok -> 1):
            signal(.foo)
            0
        } bind: .foo -> restart(.not-ok)
      } to error(NoRestartError)

    it("can send arguments to the restart"):
      res =
        { with-restarts(ok(x) -> x + 1):
            signal(.foo)
            0
        } bind: .foo -> restart(.ok, 41)

      expect(res) to be(42)

    it("may be nested"):
      a = []
      r = {
        r2 =
          with-restarts(use-value(v) -> do { a << 2, v }):
            with-restarts(use-square-of-value(v) -> do { a << 3, v * v }):
              signal(.foo)
              raise("inner: should be unreachable")

            raise("outer: should be unreachable")

        expect(a) to be([1, 2])
        expect(r2) to be(42)
        a << 4
        5
      } bind:
        .foo -> do:
          a << 1
          restart(.use-value, 42)

      expect(a) to be([1, 2, 4])
      expect(r) to be(5)

    it("calls the nearest restart if more than one have the same name"):
      res =
        { with-restarts(a(r) -> r):
            x =
              with-restarts(a(r) -> r):
                signal(.foo)

            [x, 2]
        } bind:
          .foo -> restart(.a, 0)

      expect(res) to be([0, 2])
