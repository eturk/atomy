use("core")
use("define")
use("therie")

macro(q-foo-0): '42
macro(q-foo-1): '['2, '3]

describe("quasiquotation"):
  it("constructs an expression"):
    expect(`1) to be('1)
    expect(`(1 + 1)) to be('(1 + 1))

  it("expands through unquotes"):
    expect(`(1 + ~q-foo-0)) to be('(1 + 42))

  it("expands through splice unquotes"):
    expect(`[1, ~*q-foo-1]) to be('[1, 2, 3])

  describe("unquotes"):
    it("brings an expression into a quasiquotation"):
      expect(`(1 + ~'3)) to be('(1 + 3))

      a = '2
      expect(`(1 + ~a)) to be('(1 + 2))

    it("unquotes through nested quasiquotation"):
      a = '3
      expect(`(1 + `(2 * ~~'4))) to be('(1 + `(2 * ~4)))
      expect(`(1 + `(2 * ~~a))) to be('(1 + `(2 * ~3)))
      expect(``(1 + `(2 * ~~~'4))) to be('`(1 + `(2 * ~~4)))
      expect(``(1 + `(2 * ~~~a))) to be('`(1 + `(2 * ~~3)))

  describe("splice-quotes"):
    it("unquotes a list of expressions, merging into a 'many' part"):
      a = ['3, '4]
      expect(`[1, 2, ~*['3, '4]]) to be('[1, 2, 3, 4])
      expect(`[1, 2, ~*a]) to be('[1, 2, 3, 4])

    it("splices through nested quasiquotation"):
      a = ['3, '4]
      expect(``[1, 2, ~~*['3, '4]]) to be('`[1, 2, ~*['3, '4]])
      expect(``[1, 2, ~~*a]) to be('`[1, 2, ~*['3, '4]])
      expect(```[1, 2, ~~~*['3, '4]]) to be('``[1, 2, ~~*['3, '4]])
      expect(```[1, 2, ~~~*a]) to be('``[1, 2, ~~*['3, '4]])
