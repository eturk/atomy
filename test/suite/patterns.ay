use("core")
use("control-flow")
use("therie")

describe("pattern-matching"):
  describe("expressions"):
    describe("quote"):
      it("does basic expression equality check"):
        expect('abc match: 'abc -> true) to be(true)
        expect('(1 + 2) match: '(1 + 2) -> true) to be(true)
        expect('(1 * 2) match: '(1 + 2) -> true) to be(nil)

    describe("quasi-quote"):
      it("matches expressions like quote"):
        expect('abc match: `abc -> true) to be(true)

      it("fails for expressions of different type"):
        expect('abc match: `(1 + 1) -> true) to be(nil)

      it("allows destructural binding via unquote"):
        expect('(1 + 2) match: `(1 + ~x) -> x) to be('2)

      it("matches expression attributes like method names"):
        expect('(1 + 2) match: `(1 + 2) -> true) to be(true)
        expect('(1 + 2) match: `(1 * 2) -> true) to be(nil)

      it("has the same quote/unquote semantics as a quasiquote"):
        expect(
            '(1 + `(2 + ~x)) match:
              `(1 + `(2 + ~~y)) -> y) to be('x)

        expect(
            '(1 + `(~x + ~x)) match:
              `(1 + `(~x + ~~y)) -> y) to be('x)

        expect(
            '(1 + `(~x + ~x)) match:
              `(1 + `(~y + ~~y)) -> y) to be(nil)

      it("allows arbitrary patterns in an unquote"):
        expect('(1 + 2) match: `(1 + ~('2)) -> true) to be(true)
        expect('(1 + 2) match: `(1 + ~('3)) -> true) to be(nil)
