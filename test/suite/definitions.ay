use("core")
use("define")

use("therie")

describe("definitions"):
  describe("constant scope"):
    it("retains the proper constant scope for each branch"):
      module:
        Foo = .first
        0 fizz := [0, Foo]

      module:
        Foo = .second
        1 fizz := [1, Foo]

      0 fizz should-be([0, .first])
      1 fizz should-be([1, .second])


  describe("lexical scope"):
    it("captures variables"):
      a = 1
      capturing-simple := a
      capturing-simple should-be(a)

    it("captures variables in loops"):
      objects = [Object new, Object new, Object new]
      objects each with-index [o, x]:
        { o } foo := x

      objects collect .foo should-be([0, 1, 2])


  describe("arguments"):
    describe("required"):
      it("accepts N arguments when expecting N"):
        r0(a, b) := .ok
        r0(1, 2) should-be(.ok)

      it("rejects too few arguments"):
        r1(a, b) := .ok
        { r1(1) } should-raise(Atomy MethodFail)

      it("rejects too many arguments"):
        r2(a, b) := .ok
        { r2(1, 2, 3) } should-raise(Atomy MethodFail)


    describe("splats"):
      it("consumes the rest of the arguments"):
        fizz(*args) := args
        fizz() should-be([])
        fizz(1) should-be([1])
        fizz(1, 2) should-be([1, 2])

        xs = [1, 2]
        fizz(*xs) should-be([1, 2])

      it("starts after required args"):
        bar(a, *bs) := [a, bs]
        : bar ; should-raise(Atomy MethodFail)
        bar(1) should-be([1, []])
        bar(1, 2) should-be([1, [2]])
        bar(1, 2, 3) should-be([1, [2, 3]])

      it("works with an explicit receiver"):
        x bar-2(a, *bs) := [x, a, bs]
        : bar-2 ; should-raise(Atomy MethodFail)
        0 bar-2(1) should-be([0, 1, []])
        0 bar-2(1, 2) should-be([0, 1, [2]])
        0 bar-2(1, 2, 3) should-be([0, 1, [2, 3]])

      it("appears before a block arg"):
        baz(a, *bs) &c := [a, bs, c]
        x = :;
        : baz ; should-raise(Atomy MethodFail)
        res = baz(1) &x
        res at(0) should-be(1)
        res at(1) should-be([])
        res at(2) should: kind-of(Proc)?

        res = baz(1, 2, 3) &x
        res at(0) should-be(1)
        res at(1) should-be([2, 3])
        res at(2) should: kind-of(Proc)?

    describe("default"):
      it("doesn't have to be passed"):
        d0(b = 1) := b
        d0 should-be(1)

      it("may appear after required args"):
        d1(a, b = 1) := [a, b]
        d1(0) should-be([0, 1])

      it("evaluates an expression as its default"):
        d2(a, b = 1 + 1) := [a, b]
        d2(0) should-be([0, 2])

      it("evaluates its default with other args in scope"):
        d3(a, b = a + 1) := [a, b]
        d3(0) should-be([0, 1])

      it("is overrided by an argument"):
        d4(a, b = 3) := [a, b]
        d4(0, 1) should-be([0, 1])

      it("may appear before a block arg"):
        d5(a = 1) &b := [a, b]
        d5 should-be([1, nil])
        d5(2) should-be([2, nil])

      it("may appear before a splat arg"):
        d6(a = 1, *b) := [a, b]
        d6 should-be([1, []])
        d6(2) should-be([2, []])
        d6(2, 3) should-be([2, [3]])

      it("evaluates its default with the method's context in scope"):
        x = 7
        d7(a, b = x) := [a, b]
        d7(0) should-be([0, 7])

      it("evaluates its default with the other args and the method's context in scope"):
        x = 7
        d8(a, b = a * x) := [a, b]
        d8(6) should-be([6, 42])

    describe("varying argument lengths"):
      it("tries higher required argument counts first"):
        v0(_) := 1
        v0(_, _) := 2

        v0(1) should-be(1)
        v0(1, 2) should-be(2)

      it("does the same when defined in reverse order"):
        v1(_, _) := 2
        v1(_) := 1

        v1(1) should-be(1)
        v1(1, 2) should-be(2)

      it("does not accept extra arguments for other branches"):
        v2(0) := 1
        v2 := 2

        v2(0) should-be(1)
        v2 should-be(2)
        { v2(1) } should-raise(Atomy MethodFail)
